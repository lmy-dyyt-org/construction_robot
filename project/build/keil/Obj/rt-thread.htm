<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\keil\Obj\rt-thread.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\keil\Obj\rt-thread.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Sun May 12 16:08:34 2024
<BR><P>
<H3>Maximum Stack Usage =       1808 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
exception_hook &rArr; rt_cm_backtrace_exception_hook &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[19f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">NMI_Handler</a><BR>
 <LI><a href="#[c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
 <LI><a href="#[e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">UsageFault_Handler</a><BR>
 <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[10]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DebugMon_Handler</a><BR>
 <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
 <LI><a href="#[219]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">rt_kprintf</a><BR>
 <LI><a href="#[3c2]">rt_backtrace_frame</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">rt_kprintf</a><BR>
 <LI><a href="#[459]">ulog_voutput</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[457]">ulog_hex_formater</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[454]">ulog_tail_formater</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[455]">ulog_strcpy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[453]">ulog_head_formater</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[452]">ulog_formater</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[1d2]">rt_sem_release</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[41b]">rt_susp_list_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[2d3]">rt_sched_insert_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[3c4]">rt_timer_stop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[29d]">rt_object_get_type</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[2ab]">_scheduler_stack_check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[2be]">rt_sched_remove_thread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[32c]">do_output</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">rt_kprintf</a><BR>
 <LI><a href="#[32f]">rt_rbb_blk_put</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[32d]">rt_rbb_blk_alloc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[33b]">find_empty_blk_in_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[2b0]">rt_ringbuffer_put</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[3f2]">rt_kputs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[281]">_kputs</a><BR>
 <LI><a href="#[1c7]">rt_mutex_release</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[27b]">rt_sched_thread_change_priority</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[299]">_rt_mutex_take</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[2a2]">rt_timer_start</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[2a0]">rt_thread_suspend_to_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[2d4]">rt_susp_list_enqueue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[2ce]">_thread_set_suspend_state</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[2a1]">rt_timer_control</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[219]">rt_assert_handler</a><BR>
 <LI><a href="#[f6]">stm32_control</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f6]">stm32_control</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[110]">Action_Init</a> from drv_action.o(.text.Action_Init) referenced from drv_action.o(.rti_fn.4)
 <LI><a href="#[d]">BusFault_Handler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[27]">CAN1_RX0_IRQHandler</a> from drv_can.o(.text.CAN1_RX0_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from drv_can.o(.text.CAN1_RX1_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from drv_can.o(.text.CAN1_SCE_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[26]">CAN1_TX_IRQHandler</a> from drv_can.o(.text.CAN1_TX_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX0_IRQHandler</a> from drv_can.o(.text.CAN2_RX0_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[54]">CAN2_RX1_IRQHandler</a> from drv_can.o(.text.CAN2_RX1_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[55]">CAN2_SCE_IRQHandler</a> from drv_can.o(.text.CAN2_SCE_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[52]">CAN2_TX_IRQHandler</a> from drv_can.o(.text.CAN2_TX_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[8]">CalCurveSPTA</a> from trajectory_planning.o(.text.CalCurveSPTA) referenced 2 times from trajectory_planning.o(.data.pCalCurve)
 <LI><a href="#[61]">DCMI_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream0_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream6_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream7_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[6a]">DMA2D_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream0_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream6_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream7_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[50]">ETH_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[51]">ETH_WKUP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from drv_gpio.o(.text.EXTI0_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from drv_gpio.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from drv_gpio.o(.text.EXTI1_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from drv_gpio.o(.text.EXTI2_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from drv_gpio.o(.text.EXTI3_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from drv_gpio.o(.text.EXTI4_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from drv_gpio.o(.text.EXTI9_5_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[43]">FMC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[63]">FPU_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[10c]">FSUS_Init</a> from fashion_star_uart_servo.o(.text.FSUS_Init) referenced from fashion_star_uart_servo.o(.rti_fn.4)
 <LI><a href="#[7f]">FSUS_process</a> from fashion_star_uart_servo.o(.text.FSUS_process) referenced 2 times from fashion_star_uart_servo.o(.text.FSUS_Init)
 <LI><a href="#[7e]">FSUS_uart_receive_callback1</a> from fashion_star_uart_servo.o(.text.FSUS_uart_receive_callback1) referenced 2 times from fashion_star_uart_servo.o(.text.FSUS_Init)
 <LI><a href="#[62]">HASH_RNG_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5c]">I2C3_ER_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5b]">I2C3_EV_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[56]">OTG_FS_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3c]">RTC_Alarm_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[16]">RTC_WKUP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[114]">Robot_Move_Direct_Init</a> from robot_move_direct.o(.text.Robot_Move_Direct_Init) referenced from robot_move_direct.o(.rti_fn.6)
 <LI><a href="#[84]">Robot_Move_Direct_Process</a> from robot_move_direct.o(.text.Robot_Move_Direct_Process) referenced 2 times from robot_move_direct.o(.text.Robot_Move_Direct_Init)
 <LI><a href="#[69]">SAI1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[44]">SDIO_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[66]">SPI4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[67]">SPI5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[68]">SPI6_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from drv_common.o(.text.SysTick_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[6b]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f427xx.o(.text)
 <LI><a href="#[15]">TAMP_STAMP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[45]">TIM5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[49]">TIM6_DAC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4a]">TIM7_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[47]">UART4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[64]">UART7_IRQHandler</a> from drv_usart_v2.o(.text.UART7_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[65]">UART8_IRQHandler</a> from drv_usart_v2.o(.text.UART8_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[80]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[83]">UART_DMAError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[83]">UART_DMAError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[85]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(.text.UART_DMAReceiveCplt) referenced 2 times from stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[86]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(.text.UART_DMARxHalfCplt) referenced 2 times from stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[81]">UART_DMATransmitCplt</a> from stm32f4xx_hal_uart.o(.text.UART_DMATransmitCplt) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[82]">UART_DMATxHalfCplt</a> from stm32f4xx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[38]">USART1_IRQHandler</a> from drv_usart_v2.o(.text.USART1_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from drv_usart_v2.o(.text.USART3_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[5a]">USART6_IRQHandler</a> from drv_usart_v2.o(.text.USART6_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[12b]">_GLOBAL__sub_I_HardwareSerial.cpp</a> from hardwareserial.o(.text._GLOBAL__sub_I_HardwareSerial.cpp) referenced from hardwareserial.o(.init_array)
 <LI><a href="#[12a]">_GLOBAL__sub_I_IPAddress.cpp</a> from ipaddress.o(.text._GLOBAL__sub_I_IPAddress.cpp) referenced from ipaddress.o(.init_array)
 <LI><a href="#[12c]">_GLOBAL__sub_I_Wire.cpp</a> from wire.o(.text._GLOBAL__sub_I_Wire.cpp) referenced from wire.o(.init_array)
 <LI><a href="#[2]">_PID_Hander</a> from apid.o(.text._PID_Hander) referenced 2 times from motor_cfg.o(.data..compoundliteral.1)
 <LI><a href="#[2]">_PID_Hander</a> from apid.o(.text._PID_Hander) referenced 2 times from motor_cfg.o(.data..compoundliteral.2)
 <LI><a href="#[2]">_PID_Hander</a> from apid.o(.text._PID_Hander) referenced 2 times from apid.o(.text.APID_Init)
 <LI><a href="#[112]">rtduino_init()</a> from rtduino.o(.text._ZL12rtduino_initv) referenced from rtduino.o(.rti_fn.4)
 <LI><a href="#[c8]">rtduino_sketch_entry(void*)</a> from rtduino.o(.text._ZL20rtduino_sketch_entryPv) referenced 2 times from rtduino.o(.text.rtduino_sketch_loader_create_stacksize_prio)
 <LI><a href="#[d3]">ConsoleSerial::~ConsoleSerial__deallocating()</a> from hardwareserial.o(.text._ZN13ConsoleSerialD0Ev) referenced from hardwareserial.o(.rodata._ZTV13ConsoleSerial)
 <LI><a href="#[89]">ConsoleSerial::~ConsoleSerial__sub_object()</a> from hardwareserial.o(.text._ZN13ConsoleSerialD2Ev) referenced from hardwareserial.o(.rodata._ZTV13ConsoleSerial)
 <LI><a href="#[89]">ConsoleSerial::~ConsoleSerial__sub_object()</a> from hardwareserial.o(.text._ZN13ConsoleSerialD2Ev) referenced 2 times from hardwareserial.o(.text.__cxx_global_var_init)
 <LI><a href="#[ce]">HardwareSerial::availableForWrite()</a> from hardwareserial.o(.text._ZN14HardwareSerial17availableForWriteEv) referenced from hardwareserial.o(.rodata._ZTV13ConsoleSerial)
 <LI><a href="#[ce]">HardwareSerial::availableForWrite()</a> from hardwareserial.o(.text._ZN14HardwareSerial17availableForWriteEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[d2]">HardwareSerial::peek()</a> from hardwareserial.o(.text._ZN14HardwareSerial4peekEv) referenced from hardwareserial.o(.rodata._ZTV13ConsoleSerial)
 <LI><a href="#[d2]">HardwareSerial::peek()</a> from hardwareserial.o(.text._ZN14HardwareSerial4peekEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[d1]">HardwareSerial::read()</a> from hardwareserial.o(.text._ZN14HardwareSerial4readEv) referenced from hardwareserial.o(.rodata._ZTV13ConsoleSerial)
 <LI><a href="#[d1]">HardwareSerial::read()</a> from hardwareserial.o(.text._ZN14HardwareSerial4readEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[cf]">HardwareSerial::flush()</a> from hardwareserial.o(.text._ZN14HardwareSerial5flushEv) referenced from hardwareserial.o(.rodata._ZTV13ConsoleSerial)
 <LI><a href="#[cf]">HardwareSerial::flush()</a> from hardwareserial.o(.text._ZN14HardwareSerial5flushEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[cd]">HardwareSerial::write(unsigned char const*, unsigned int)</a> from hardwareserial.o(.text._ZN14HardwareSerial5writeEPKhj) referenced from hardwareserial.o(.rodata._ZTV13ConsoleSerial)
 <LI><a href="#[cd]">HardwareSerial::write(unsigned char const*, unsigned int)</a> from hardwareserial.o(.text._ZN14HardwareSerial5writeEPKhj) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[cc]">HardwareSerial::write(unsigned char)</a> from hardwareserial.o(.text._ZN14HardwareSerial5writeEh) referenced from hardwareserial.o(.rodata._ZTV13ConsoleSerial)
 <LI><a href="#[cc]">HardwareSerial::write(unsigned char)</a> from hardwareserial.o(.text._ZN14HardwareSerial5writeEh) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[d0]">HardwareSerial::available()</a> from hardwareserial.o(.text._ZN14HardwareSerial9availableEv) referenced from hardwareserial.o(.rodata._ZTV13ConsoleSerial)
 <LI><a href="#[d0]">HardwareSerial::available()</a> from hardwareserial.o(.text._ZN14HardwareSerial9availableEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[d5]">HardwareSerial::~HardwareSerial__deallocating()</a> from hardwareserial.o(.text._ZN14HardwareSerialD0Ev) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[d4]">HardwareSerial::~HardwareSerial__sub_object()</a> from hardwareserial.o(.text._ZN14HardwareSerialD2Ev) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[d8]">Print::availableForWrite()</a> from print.o(.text._ZN5Print17availableForWriteEv) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[d8]">Print::availableForWrite()</a> from print.o(.text._ZN5Print17availableForWriteEv) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[d8]">Print::availableForWrite()</a> from print.o(.text._ZN5Print17availableForWriteEv) referenced from wire.o(.rodata._ZTV7TwoWire)
 <LI><a href="#[d9]">Print::flush()</a> from print.o(.text._ZN5Print5flushEv) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[d9]">Print::flush()</a> from print.o(.text._ZN5Print5flushEv) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[d7]">Print::write(unsigned char const*, unsigned int)</a> from print.o(.text._ZN5Print5writeEPKhj) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[d7]">Print::write(unsigned char const*, unsigned int)</a> from print.o(.text._ZN5Print5writeEPKhj) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[db]">Stream::~Stream__deallocating()</a> from hardwareserial.o(.text._ZN6StreamD0Ev) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[da]">Stream::~Stream__sub_object()</a> from hardwareserial.o(.text._ZN6StreamD2Ev) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[e1]">TwoWire::peek()</a> from wire.o(.text._ZN7TwoWire4peekEv) referenced from wire.o(.rodata._ZTV7TwoWire)
 <LI><a href="#[e0]">TwoWire::read()</a> from wire.o(.text._ZN7TwoWire4readEv) referenced from wire.o(.rodata._ZTV7TwoWire)
 <LI><a href="#[de]">TwoWire::flush()</a> from wire.o(.text._ZN7TwoWire5flushEv) referenced from wire.o(.rodata._ZTV7TwoWire)
 <LI><a href="#[dd]">TwoWire::write(unsigned char const*, unsigned int)</a> from wire.o(.text._ZN7TwoWire5writeEPKhj) referenced from wire.o(.rodata._ZTV7TwoWire)
 <LI><a href="#[dc]">TwoWire::write(unsigned char)</a> from wire.o(.text._ZN7TwoWire5writeEh) referenced from wire.o(.rodata._ZTV7TwoWire)
 <LI><a href="#[df]">TwoWire::available()</a> from wire.o(.text._ZN7TwoWire9availableEv) referenced from wire.o(.rodata._ZTV7TwoWire)
 <LI><a href="#[e2]">TwoWire::~TwoWire__deallocating()</a> from wire.o(.text._ZN7TwoWireD0Ev) referenced from wire.o(.rodata._ZTV7TwoWire)
 <LI><a href="#[8a]">TwoWire::~TwoWire__sub_object()</a> from wire.o(.text._ZN7TwoWireD2Ev) referenced from wire.o(.rodata._ZTV7TwoWire)
 <LI><a href="#[8a]">TwoWire::~TwoWire__sub_object()</a> from wire.o(.text._ZN7TwoWireD2Ev) referenced 2 times from wire.o(.text.__cxx_global_var_init)
 <LI><a href="#[e3]">IPAddress::printTo(Print&) const</a> from ipaddress.o(.text._ZNK9IPAddress7printToER5Print) referenced from ipaddress.o(.rodata._ZTV9IPAddress)
 <LI><a href="#[d6]">__cxa_pure_virtual</a> from cxx_crt.o(.text.__cxa_pure_virtual) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[d6]">__cxa_pure_virtual</a> from cxx_crt.o(.text.__cxa_pure_virtual) referenced 4 times from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[d6]">__cxa_pure_virtual</a> from cxx_crt.o(.text.__cxa_pure_virtual) referenced from ipaddress.o(.rodata._ZTV9Printable)
 <LI><a href="#[6c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f427xx.o(.text)
 <LI><a href="#[129]">__perf_counter_init</a> from perf_counter.o(.text.__perf_counter_init) referenced from perf_counter.o(.init_array)
 <LI><a href="#[8c]">__rt_thread_scheduler_hook</a> from perf_os_patch_rt_thread.o(.text.__rt_thread_scheduler_hook) referenced 2 times from perf_os_patch_rt_thread.o(.text.__perf_os_patch_init)
 <LI><a href="#[b0]">_adc_control</a> from adc.o(.text._adc_control) referenced 2 times from adc.o(.text.rt_hw_adc_register)
 <LI><a href="#[af]">_adc_read</a> from adc.o(.text._adc_read) referenced 2 times from adc.o(.text.rt_hw_adc_register)
 <LI><a href="#[e4]">_can_config</a> from drv_can.o(.text._can_config) referenced from drv_can.o(.rodata._can_ops)
 <LI><a href="#[e5]">_can_control</a> from drv_can.o(.text._can_control) referenced from drv_can.o(.rodata._can_ops)
 <LI><a href="#[e7]">_can_recvmsg</a> from drv_can.o(.text._can_recvmsg) referenced from drv_can.o(.rodata._can_ops)
 <LI><a href="#[e6]">_can_sendmsg</a> from drv_can.o(.text._can_sendmsg) referenced from drv_can.o(.rodata._can_ops)
 <LI><a href="#[6d]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[107]">_perf_counter_init</a> from perf_os_patch_rt_thread.o(.text._perf_counter_init) referenced from perf_os_patch_rt_thread.o(.rti_fn.2)
 <LI><a href="#[120]">_pin_cmd</a> from pin.o(.text._pin_cmd) referenced from pin.o(FSymTab)
 <LI><a href="#[ab]">_pin_control</a> from pin.o(.text._pin_control) referenced 2 times from pin.o(.text.rt_device_pin_register)
 <LI><a href="#[a9]">_pin_read</a> from pin.o(.text._pin_read) referenced 2 times from pin.o(.text.rt_device_pin_register)
 <LI><a href="#[aa]">_pin_write</a> from pin.o(.text._pin_write) referenced 2 times from pin.o(.text.rt_device_pin_register)
 <LI><a href="#[6f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[ae]">_pwm_control</a> from rt_drv_pwm.o(.text._pwm_control) referenced 2 times from rt_drv_pwm.o(.text.rt_device_pwm_register)
 <LI><a href="#[ac]">_pwm_read</a> from rt_drv_pwm.o(.text._pwm_read) referenced 2 times from rt_drv_pwm.o(.text.rt_device_pwm_register)
 <LI><a href="#[ad]">_pwm_write</a> from rt_drv_pwm.o(.text._pwm_write) referenced 2 times from rt_drv_pwm.o(.text.rt_device_pwm_register)
 <LI><a href="#[71]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[c0]">_serial_fifo_rx</a> from serial_v2.o(.text._serial_fifo_rx) referenced 2 times from serial_v2.o(.text.rt_serial_rx_enable)
 <LI><a href="#[c2]">_serial_fifo_tx_blocking_buf</a> from serial_v2.o(.text._serial_fifo_tx_blocking_buf) referenced 2 times from serial_v2.o(.text.rt_serial_tx_enable)
 <LI><a href="#[c3]">_serial_fifo_tx_blocking_nbuf</a> from serial_v2.o(.text._serial_fifo_tx_blocking_nbuf) referenced 2 times from serial_v2.o(.text.rt_serial_tx_enable)
 <LI><a href="#[c4]">_serial_fifo_tx_nonblocking</a> from serial_v2.o(.text._serial_fifo_tx_nonblocking) referenced 2 times from serial_v2.o(.text.rt_serial_tx_enable)
 <LI><a href="#[bf]">_serial_poll_rx</a> from serial_v2.o(.text._serial_poll_rx) referenced 2 times from serial_v2.o(.text.rt_serial_rx_enable)
 <LI><a href="#[c1]">_serial_poll_tx</a> from serial_v2.o(.text._serial_poll_tx) referenced 2 times from serial_v2.o(.text.rt_serial_tx_enable)
 <LI><a href="#[70]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[6e]">_sputc</a> from _sputc.o(.text) referenced from sprintf.o(.text)
 <LI><a href="#[8d]">_thread_exit</a> from thread.o(.text._thread_exit) referenced 2 times from thread.o(.text._thread_init)
 <LI><a href="#[8e]">_thread_timeout</a> from thread.o(.text._thread_timeout) referenced 2 times from thread.o(.text._thread_init)
 <LI><a href="#[c5]">_timer_thread_entry</a> from timer.o(.text._timer_thread_entry) referenced 2 times from timer.o(.text.rt_system_timer_thread_init)
 <LI><a href="#[101]">abus_all_init</a> from abus_port.o(.text.abus_all_init) referenced from abus_port.o(.rti_fn.1)
 <LI><a href="#[11e]">adc</a> from adc.o(.text.adc) referenced from adc.o(FSymTab)
 <LI><a href="#[a8]">assert_hook</a> from cmb_port.o(.text.assert_hook) referenced 2 times from cmb_port.o(.text.rt_cm_backtrace_init)
 <LI><a href="#[c9]">async_output_thread_entry</a> from ulog.o(.text.async_output_thread_entry) referenced 2 times from ulog.o(.text.ulog_async_init)
 <LI><a href="#[95]">can_rx_call</a> from motor_dj_rm_driver.o(.text.can_rx_call) referenced 2 times from motor_dj_rm_driver.o(.text.can_rx_thread)
 <LI><a href="#[a0]">can_rx_thread</a> from motor_dj_rm_driver.o(.text.can_rx_thread) referenced 2 times from motor_dj_rm_driver.o(.text.motor_dj_init)
 <LI><a href="#[a1]">can_rx_thread1</a> from motor_dj_rm_driver.o(.text.can_rx_thread1) referenced 2 times from motor_dj_rm_driver.o(.text.motor_dj_init)
 <LI><a href="#[b7]">cantimeout</a> from can.o(.text.cantimeout) referenced 2 times from can.o(.text.rt_hw_can_register)
 <LI><a href="#[98]">chassis_port_handle</a> from chassis_port.o(.text.chassis_port_handle) referenced 2 times from chassis_port.o(.text.chassis_port_init)
 <LI><a href="#[113]">chassis_port_init</a> from chassis_port.o(.text.chassis_port_init) referenced from chassis_port.o(.rti_fn.5)
 <LI><a href="#[97]">chassis_port_plan</a> from chassis_port.o(.text.chassis_port_plan) referenced 2 times from chassis_port.o(.text.chassis_port_init)
 <LI><a href="#[96]">chassis_port_plan_init</a> from chassis_port.o(.text.chassis_port_plan_init) referenced 2 times from chassis_port.o(.text.chassis_port_init)
 <LI><a href="#[90]">chassis_sub_callback</a> from chassis_port.o(.text.chassis_sub_callback) referenced 2 times from abus_port.o(.text.abus_all_init)
 <LI><a href="#[125]">clear</a> from cmd.o(.text.clear) referenced from cmd.o(FSymTab)
 <LI><a href="#[11c]">cmb_test</a> from cmb_port.o(.text.cmb_test) referenced from cmb_port.o(FSymTab)
 <LI><a href="#[128]">cmd_backtrace</a> from kservice.o(.text.cmd_backtrace) referenced from kservice.o(FSymTab)
 <LI><a href="#[11d]">cmd_canstat</a> from can.o(.text.cmd_canstat) referenced from can.o(FSymTab)
 <LI><a href="#[124]">cmd_free</a> from msh.o(.text.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[127]">cmd_list</a> from cmd.o(.text.cmd_list) referenced from cmd.o(FSymTab)
 <LI><a href="#[11b]">cmd_motor</a> from motor.o(.text.cmd_motor) referenced from motor.o(FSymTab)
 <LI><a href="#[123]">cmd_ps</a> from msh.o(.text.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[9a]">color_com</a> from color_com.o(.text.color_com) referenced 2 times from color_com.o(.text.color_com_init)
 <LI><a href="#[115]">color_com_init</a> from color_com.o(.text.color_com_init) referenced from color_com.o(.rti_fn.6)
 <LI><a href="#[111]">cplusplus_system_init</a> from cxx_crt_init.o(.text.cplusplus_system_init) referenced from cxx_crt_init.o(.rti_fn.4)
 <LI><a href="#[74]">d_handle_Increment_Complete</a> from apid.o(.text.d_handle_Increment_Complete) referenced 2 times from apid.o(.text.APID_Init)
 <LI><a href="#[4]">d_handle_Position_Complete</a> from apid.o(.text.d_handle_Position_Complete) referenced 2 times from motor_cfg.o(.data..compoundliteral.1)
 <LI><a href="#[4]">d_handle_Position_Complete</a> from apid.o(.text.d_handle_Position_Complete) referenced 2 times from motor_cfg.o(.data..compoundliteral.2)
 <LI><a href="#[4]">d_handle_Position_Complete</a> from apid.o(.text.d_handle_Position_Complete) referenced 2 times from apid.o(.text.APID_Init)
 <LI><a href="#[10d]">dbus_uart_init</a> from bsp_sbus.o(.text.dbus_uart_init) referenced from bsp_sbus.o(.rti_fn.4)
 <LI><a href="#[7d]">dbus_uart_rx_ind</a> from drv_action.o(.text.dbus_uart_rx_ind) referenced 2 times from drv_action.o(.text.Action_Init)
 <LI><a href="#[9b]">dbus_uart_rx_ind</a> from bsp_sbus.o(.text.dbus_uart_rx_ind) referenced 2 times from bsp_sbus.o(.text.dbus_uart_init)
 <LI><a href="#[7]">driver_mai</a> from chassis_module_mai.o(.text.driver_mai) referenced 2 times from chassis_module_mai.o(.data.ops_mai)
 <LI><a href="#[5]">drv_pwm_control</a> from drv_pwm.o(.text.drv_pwm_control) referenced 2 times from drv_pwm.o(.data.drv_ops)
 <LI><a href="#[a7]">exception_hook</a> from cmb_port.o(.text.exception_hook) referenced 2 times from cmb_port.o(.text.rt_cm_backtrace_init)
 <LI><a href="#[9c]">finsh_rx_ind</a> from shell.o(.text.finsh_rx_ind) referenced 2 times from shell.o(.text.finsh_set_device)
 <LI><a href="#[116]">finsh_system_init</a> from shell.o(.text.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[9d]">finsh_thread_entry</a> from shell.o(.text.finsh_thread_entry) referenced 2 times from shell.o(.text.finsh_system_init)
 <LI><a href="#[9e]">follow_line</a> from follow_line.o(.text.follow_line) referenced 2 times from follow_line.o(.text.follow_line_init)
 <LI><a href="#[10e]">follow_line_init</a> from follow_line.o(.text.follow_line_init) referenced from follow_line.o(.rti_fn.4)
 <LI><a href="#[ef]">i2c_bit_xfer</a> from i2c-bit-ops.o(.text.i2c_bit_xfer) referenced from i2c-bit-ops.o(.rodata.i2c_bit_bus_ops)
 <LI><a href="#[be]">i2c_bus_device_control</a> from i2c_dev.o(.text.i2c_bus_device_control) referenced 2 times from i2c_dev.o(.text.rt_i2c_bus_device_device_init)
 <LI><a href="#[bc]">i2c_bus_device_read</a> from i2c_dev.o(.text.i2c_bus_device_read) referenced 2 times from i2c_dev.o(.text.rt_i2c_bus_device_device_init)
 <LI><a href="#[bd]">i2c_bus_device_write</a> from i2c_dev.o(.text.i2c_bus_device_write) referenced 2 times from i2c_dev.o(.text.rt_i2c_bus_device_device_init)
 <LI><a href="#[73]">i_handle_Increment_Normal</a> from apid.o(.text.i_handle_Increment_Normal) referenced 2 times from apid.o(.text.APID_Init)
 <LI><a href="#[73]">i_handle_Increment_Normal</a> from apid.o(.text.i_handle_Increment_Normal) referenced 2 times from apid_exfunc.o(.text.APID_SET_I_Function)
 <LI><a href="#[77]">i_handle_Increment_Saturation</a> from apid.o(.text.i_handle_Increment_Saturation) referenced 2 times from apid_exfunc.o(.text.APID_SET_I_Function)
 <LI><a href="#[75]">i_handle_Increment_Separation</a> from apid.o(.text.i_handle_Increment_Separation) referenced 2 times from apid_exfunc.o(.text.APID_SET_I_Function)
 <LI><a href="#[79]">i_handle_Increment_Speed</a> from apid.o(.text.i_handle_Increment_Speed) referenced 2 times from apid_exfunc.o(.text.APID_SET_I_Function)
 <LI><a href="#[7b]">i_handle_Increment_Trapeziod</a> from apid.o(.text.i_handle_Increment_Trapeziod) referenced 2 times from apid_exfunc.o(.text.APID_SET_I_Function)
 <LI><a href="#[3]">i_handle_Position_Normal</a> from apid.o(.text.i_handle_Position_Normal) referenced 2 times from motor_cfg.o(.data..compoundliteral.1)
 <LI><a href="#[3]">i_handle_Position_Normal</a> from apid.o(.text.i_handle_Position_Normal) referenced 2 times from motor_cfg.o(.data..compoundliteral.2)
 <LI><a href="#[3]">i_handle_Position_Normal</a> from apid.o(.text.i_handle_Position_Normal) referenced 2 times from apid.o(.text.APID_Init)
 <LI><a href="#[3]">i_handle_Position_Normal</a> from apid.o(.text.i_handle_Position_Normal) referenced 2 times from apid_exfunc.o(.text.APID_SET_I_Function)
 <LI><a href="#[78]">i_handle_Position_Saturation</a> from apid.o(.text.i_handle_Position_Saturation) referenced 2 times from apid_exfunc.o(.text.APID_SET_I_Function)
 <LI><a href="#[76]">i_handle_Position_Separation</a> from apid.o(.text.i_handle_Position_Separation) referenced 2 times from apid_exfunc.o(.text.APID_SET_I_Function)
 <LI><a href="#[7a]">i_handle_Position_Speed</a> from apid.o(.text.i_handle_Position_Speed) referenced 2 times from apid_exfunc.o(.text.APID_SET_I_Function)
 <LI><a href="#[7c]">i_handle_Position_Trapeziod</a> from apid.o(.text.i_handle_Position_Trapeziod) referenced 2 times from apid_exfunc.o(.text.APID_SET_I_Function)
 <LI><a href="#[c7]">idle_thread_entry</a> from idle.o(.text.idle_thread_entry) referenced 2 times from idle.o(.text.rt_thread_idle_init)
 <LI><a href="#[cb]">ind_dj_can_motor_callback</a> from motor_dj_rm_driver.o(.text.ind_dj_can_motor_callback) referenced from motor_dj_rm_driver.o(.rodata..L__const.can_rx_thread.items)
 <LI><a href="#[72]">isspace</a> from wstring.o(.text.isspace) referenced from strtod.o(.text)
 <LI><a href="#[8f]">line_dir_sub_callback</a> from follow_line.o(.text.line_dir_sub_callback) referenced 2 times from abus_port.o(.text.abus_all_init)
 <LI><a href="#[88]">loop</a> from applications_arduino_main.o(.text.loop) referenced 2 times from rtduino.o(.text._ZL12rtduino_initv)
 <LI><a href="#[a6]">main_thread_entry</a> from components.o(.text.main_thread_entry) referenced 2 times from components.o(.text.rt_application_init)
 <LI><a href="#[6]">module_mai</a> from chassis_module_mai.o(.text.module_mai) referenced 2 times from chassis_module_mai.o(.data.ops_mai)
 <LI><a href="#[a2]">motor_behiver_1</a> from motor.o(.text.motor_behiver_1) referenced 2 times from motor.o(.text.motor_updata_cfg)
 <LI><a href="#[a3]">motor_behiver_2</a> from motor.o(.text.motor_behiver_2) referenced 2 times from motor.o(.text.motor_updata_cfg)
 <LI><a href="#[a4]">motor_behiver_3</a> from motor.o(.text.motor_behiver_3) referenced 2 times from motor.o(.text.motor_updata_cfg)
 <LI><a href="#[a5]">motor_behiver_4</a> from motor.o(.text.motor_behiver_4) referenced 2 times from motor.o(.text.motor_updata_cfg)
 <LI><a href="#[1]">motor_dj_ctr</a> from motor_dj_rm_driver.o(.text.motor_dj_ctr) referenced 2 times from motor_cfg.o(.data..compoundliteral)
 <LI><a href="#[0]">motor_dj_driver</a> from motor_dj_rm_driver.o(.text.motor_dj_driver) referenced 2 times from motor_cfg.o(.data..compoundliteral)
 <LI><a href="#[10f]">motor_dj_init</a> from motor_dj_rm_driver.o(.text.motor_dj_init) referenced from motor_dj_rm_driver.o(.rti_fn.4)
 <LI><a href="#[122]">msh_help</a> from msh.o(.text.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[100]">power_init</a> from aboard_power_switch.o(.text.power_init) referenced from aboard_power_switch.o(.rti_fn.1)
 <LI><a href="#[118]">power_switch</a> from aboard_power_switch.o(.text.power_switch) referenced from aboard_power_switch.o(FSymTab)
 <LI><a href="#[11f]">pwm_list</a> from rt_drv_pwm.o(.text.pwm_list) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[94]">rbmg_chassis_ctrl_callback</a> from robotmanager.o(.text.rbmg_chassis_ctrl_callback) referenced 2 times from abus_port.o(.text.abus_all_init)
 <LI><a href="#[92]">rbmg_dir_callback</a> from robotmanager.o(.text.rbmg_dir_callback) referenced 2 times from abus_port.o(.text.abus_all_init)
 <LI><a href="#[91]">rbmg_error_callback</a> from robotmanager.o(.text.rbmg_error_callback) referenced 2 times from abus_port.o(.text.abus_all_init)
 <LI><a href="#[93]">rbmg_special_point_callback</a> from robotmanager.o(.text.rbmg_special_point_callback) referenced 2 times from abus_port.o(.text.abus_all_init)
 <LI><a href="#[121]">reboot</a> from drv_common.o(.text.reboot) referenced from drv_common.o(FSymTab)
 <LI><a href="#[b3]">rt_can_close</a> from can.o(.text.rt_can_close) referenced 2 times from can.o(.text.rt_hw_can_register)
 <LI><a href="#[b6]">rt_can_control</a> from can.o(.text.rt_can_control) referenced 2 times from can.o(.text.rt_hw_can_register)
 <LI><a href="#[b1]">rt_can_init</a> from can.o(.text.rt_can_init) referenced 2 times from can.o(.text.rt_hw_can_register)
 <LI><a href="#[b2]">rt_can_open</a> from can.o(.text.rt_can_open) referenced 2 times from can.o(.text.rt_hw_can_register)
 <LI><a href="#[b4]">rt_can_read</a> from can.o(.text.rt_can_read) referenced 2 times from can.o(.text.rt_hw_can_register)
 <LI><a href="#[b5]">rt_can_write</a> from can.o(.text.rt_can_write) referenced 2 times from can.o(.text.rt_hw_can_register)
 <LI><a href="#[10a]">rt_cm_backtrace_init</a> from cmb_port.o(.text.rt_cm_backtrace_init) referenced from cmb_port.o(.rti_fn.3)
 <LI><a href="#[103]">rt_hw_can_init</a> from drv_can.o(.text.rt_hw_can_init) referenced from drv_can.o(.rti_fn.1)
 <LI><a href="#[104]">rt_hw_i2c_init</a> from drv_soft_i2c.o(.text.rt_hw_i2c_init) referenced from drv_soft_i2c.o(.rti_fn.1)
 <LI><a href="#[f4]">rt_hw_us_delay</a> from drv_common.o(.text.rt_hw_us_delay) referenced from drv_soft_i2c.o(.rodata.stm32_bit_ops_default)
 <LI><a href="#[ba]">rt_serial_close</a> from serial_v2.o(.text.rt_serial_close) referenced 2 times from serial_v2.o(.text.rt_hw_serial_register)
 <LI><a href="#[bb]">rt_serial_control</a> from serial_v2.o(.text.rt_serial_control) referenced 2 times from serial_v2.o(.text.rt_hw_serial_register)
 <LI><a href="#[b8]">rt_serial_init</a> from serial_v2.o(.text.rt_serial_init) referenced 2 times from serial_v2.o(.text.rt_hw_serial_register)
 <LI><a href="#[b9]">rt_serial_open</a> from serial_v2.o(.text.rt_serial_open) referenced 2 times from serial_v2.o(.text.rt_hw_serial_register)
 <LI><a href="#[106]">rti_board_end</a> from components.o(.text.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[ff]">rti_board_start</a> from components.o(.text.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[117]">rti_end</a> from components.o(.text.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[fe]">rti_start</a> from components.o(.text.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[87]">setup</a> from applications_arduino_main.o(.text.setup) referenced 2 times from rtduino.o(.text._ZL12rtduino_initv)
 <LI><a href="#[11a]">start_shakdown</a> from motor.o(.text.start_shakdown) referenced from motor.o(FSymTab)
 <LI><a href="#[fa]">stm32_adc_enabled</a> from drv_adc.o(.text.stm32_adc_enabled) referenced from drv_adc.o(.rodata.stm_adc_ops)
 <LI><a href="#[fc]">stm32_adc_get_resolution</a> from drv_adc.o(.text.stm32_adc_get_resolution) referenced from drv_adc.o(.rodata.stm_adc_ops)
 <LI><a href="#[fb]">stm32_adc_get_value</a> from drv_adc.o(.text.stm32_adc_get_value) referenced from drv_adc.o(.rodata.stm_adc_ops)
 <LI><a href="#[fd]">stm32_adc_get_vref</a> from drv_adc.o(.text.stm32_adc_get_vref) referenced from drv_adc.o(.rodata.stm_adc_ops)
 <LI><a href="#[102]">stm32_adc_init</a> from drv_adc.o(.text.stm32_adc_init) referenced from drv_adc.o(.rti_fn.1)
 <LI><a href="#[f5]">stm32_configure</a> from drv_usart_v2.o(.text.stm32_configure) referenced from drv_usart_v2.o(.rodata.stm32_uart_ops)
 <LI><a href="#[f6]">stm32_control</a> from drv_usart_v2.o(.text.stm32_control) referenced from drv_usart_v2.o(.rodata.stm32_uart_ops)
 <LI><a href="#[f3]">stm32_get_scl</a> from drv_soft_i2c.o(.text.stm32_get_scl) referenced from drv_soft_i2c.o(.rodata.stm32_bit_ops_default)
 <LI><a href="#[f2]">stm32_get_sda</a> from drv_soft_i2c.o(.text.stm32_get_sda) referenced from drv_soft_i2c.o(.rodata.stm32_bit_ops_default)
 <LI><a href="#[f8]">stm32_getc</a> from drv_usart_v2.o(.text.stm32_getc) referenced from drv_usart_v2.o(.rodata.stm32_uart_ops)
 <LI><a href="#[eb]">stm32_pin_attach_irq</a> from drv_gpio.o(.text.stm32_pin_attach_irq) referenced from drv_gpio.o(.rodata._stm32_pin_ops)
 <LI><a href="#[ec]">stm32_pin_dettach_irq</a> from drv_gpio.o(.text.stm32_pin_dettach_irq) referenced from drv_gpio.o(.rodata._stm32_pin_ops)
 <LI><a href="#[ee]">stm32_pin_get</a> from drv_gpio.o(.text.stm32_pin_get) referenced from drv_gpio.o(.rodata._stm32_pin_ops)
 <LI><a href="#[ed]">stm32_pin_irq_enable</a> from drv_gpio.o(.text.stm32_pin_irq_enable) referenced from drv_gpio.o(.rodata._stm32_pin_ops)
 <LI><a href="#[e8]">stm32_pin_mode</a> from drv_gpio.o(.text.stm32_pin_mode) referenced from drv_gpio.o(.rodata._stm32_pin_ops)
 <LI><a href="#[ea]">stm32_pin_read</a> from drv_gpio.o(.text.stm32_pin_read) referenced from drv_gpio.o(.rodata._stm32_pin_ops)
 <LI><a href="#[e9]">stm32_pin_write</a> from drv_gpio.o(.text.stm32_pin_write) referenced from drv_gpio.o(.rodata._stm32_pin_ops)
 <LI><a href="#[f7]">stm32_putc</a> from drv_usart_v2.o(.text.stm32_putc) referenced from drv_usart_v2.o(.rodata.stm32_uart_ops)
 <LI><a href="#[10b]">stm32_pwm_init</a> from drv_pwm.o(.text.stm32_pwm_init) referenced from drv_pwm.o(.rti_fn.3)
 <LI><a href="#[f1]">stm32_set_scl</a> from drv_soft_i2c.o(.text.stm32_set_scl) referenced from drv_soft_i2c.o(.rodata.stm32_bit_ops_default)
 <LI><a href="#[f0]">stm32_set_sda</a> from drv_soft_i2c.o(.text.stm32_set_sda) referenced from drv_soft_i2c.o(.rodata.stm32_bit_ops_default)
 <LI><a href="#[f9]">stm32_transmit</a> from drv_usart_v2.o(.text.stm32_transmit) referenced from drv_usart_v2.o(.rodata.stm32_uart_ops)
 <LI><a href="#[c6]">timeout</a> from timer.o(.text.timeout) referenced 2 times from timer.o(.text.rt_system_timer_thread_init)
 <LI><a href="#[9f]">timer1_callback</a> from motor_dj_rm_driver.o(.text.timer1_callback) referenced 2 times from motor_dj_rm_driver.o(.text.motor_dj_init)
 <LI><a href="#[99]">uart_rx_ind</a> from color_com.o(.text.uart_rx_ind) referenced 2 times from color_com.o(.text.color_com)
 <LI><a href="#[108]">ulog_async_init</a> from ulog.o(.text.ulog_async_init) referenced from ulog.o(.rti_fn.2)
 <LI><a href="#[109]">ulog_console_backend_init</a> from console_be.o(.text.ulog_console_backend_init) referenced from console_be.o(.rti_fn.2)
 <LI><a href="#[ca]">ulog_console_backend_output</a> from console_be.o(.text.ulog_console_backend_output) referenced 2 times from console_be.o(.text.ulog_console_backend_init)
 <LI><a href="#[105]">ulog_init</a> from ulog.o(.text.ulog_init) referenced from ulog.o(.rti_fn.1)
 <LI><a href="#[8b]">user_code_insert_to_systick_handler</a> from perf_counter.o(.text.user_code_insert_to_systick_handler) referenced 2 times from perf_os_patch_rt_thread.o(.text.__perf_os_patch_init)
 <LI><a href="#[119]">var</a> from apid_exfunc.o(.text.var) referenced from apid_exfunc.o(FSymTab)
 <LI><a href="#[126]">version</a> from cmd.o(.text.version) referenced from cmd.o(FSymTab)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[130]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[48c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[48d]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[48e]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[48f]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[490]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[491]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[131]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[188]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[133]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[135]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[137]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[138]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[139]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[492]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[13b]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[13d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[13e]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[13f]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[141]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[143]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[145]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[146]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[147]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[149]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[493]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[14b]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[14d]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[14f]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[151]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[494]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[160]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[153]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[495]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[155]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[496]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[497]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[498]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[499]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[49a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[157]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[49b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[49c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[158]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[49d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[49e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[49f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[4a0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[4a1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[4a2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[4a3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[4a4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[4a5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[4a6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[4a7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[4a8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[165]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[15b]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[4a9]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[4aa]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[4ab]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[4ac]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[4ad]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[4ae]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[4af]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[12f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[4b0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[15d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[15f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[4b1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[161]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4b2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1a8]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[164]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[4b3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[166]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[19f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f427xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22c]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_nonblocking
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_rx
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_stack_check
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>

<P><STRONG><a name="[22d]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_nonblocking
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_rx
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
</UL>

<P><STRONG><a name="[419]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[41a]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[428]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[4b4]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4b5]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set_pulse
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set_period
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[4b6]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__motor_read_feedback
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
</UL>

<P><STRONG><a name="[16a]"></a>_ll_sdiv</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[16c]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[16e]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_pos
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_speed
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_torque
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_shakdown
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[171]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[173]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[3a7]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
</UL>

<P><STRONG><a name="[43d]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[33f]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_register
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[250]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_register
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(char const*)
</UL>

<P><STRONG><a name="[3a4]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[340]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[233]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__afifo_out_data
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__afifo_in
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_FSUS_up
</UL>

<P><STRONG><a name="[175]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4b7]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[4b8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4b9]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4ba]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[4bb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[4bc]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[177]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[2e2]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_opt_id_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_test
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[4bd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4be]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4bf]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4c0]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4c1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[4c2]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[4c3]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[17a]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[17c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[17d]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[17e]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[17f]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[17b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[13c]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[132]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[16d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[6e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[182]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[144]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[185]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[140]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[148]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[186]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[142]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[14a]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[134]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[181]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[172]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[18c]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[170]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[4c4]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[4c5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4c6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[184]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[180]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[196]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[199]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[19a]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[14c]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[14e]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[19b]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[150]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[152]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[189]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[70]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[19c]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[183]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[15c]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = __cxa_finalize &rArr; free &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[15e]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[198]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1a4]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[192]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[163]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[4c7]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[48b]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[12d]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cxx_crt_init.o(.text.$Sub$$__cpp_initialize__aeabi_))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_1
</UL>

<P><STRONG><a name="[162]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[393]"></a>APID_Get_Out</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, apid.o(.text.APID_Get_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = APID_Get_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_3
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_1
</UL>

<P><STRONG><a name="[392]"></a>APID_Hander</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, apid.o(.text.APID_Hander))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APID_Hander
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_3
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_1
</UL>

<P><STRONG><a name="[1ad]"></a>APID_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, apid.o(.text.APID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = APID_Init &rArr; APID_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_updata_cfg
</UL>

<P><STRONG><a name="[1ae]"></a>APID_Reset</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, apid.o(.text.APID_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = APID_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Init
</UL>

<P><STRONG><a name="[1af]"></a>APID_SET_I_Function</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, apid_exfunc.o(.text.APID_SET_I_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = APID_SET_I_Function &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Set_Integral_Limit
</UL>

<P><STRONG><a name="[43b]"></a>APID_Set_Bias_Dead_Zone</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, apid.o(.text.APID_Set_Bias_Dead_Zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APID_Set_Bias_Dead_Zone
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_passive_feedback
</UL>

<P><STRONG><a name="[43c]"></a>APID_Set_Bias_Limit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, apid.o(.text.APID_Set_Bias_Limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APID_Set_Bias_Limit
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_passive_feedback
</UL>

<P><STRONG><a name="[1b1]"></a>APID_Set_Integral_Limit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, apid_exfunc.o(.text.APID_Set_Integral_Limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = APID_Set_Integral_Limit &rArr; APID_SET_I_Function &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_SET_I_Function
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_passive_feedback
</UL>

<P><STRONG><a name="[43a]"></a>APID_Set_Out_Limit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, apid.o(.text.APID_Set_Out_Limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APID_Set_Out_Limit
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_passive_feedback
</UL>

<P><STRONG><a name="[391]"></a>APID_Set_Present</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, apid.o(.text.APID_Set_Present))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APID_Set_Present
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_3
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_1
</UL>

<P><STRONG><a name="[390]"></a>APID_Set_Target</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, apid.o(.text.APID_Set_Target))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APID_Set_Target
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_3
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_1
</UL>

<P><STRONG><a name="[110]"></a>Action_Init</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, drv_action.o(.text.Action_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = Action_Init &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_action.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[2ea]"></a>BUG_ON</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, afifo.o(.text.BUG_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BUG_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_init
</UL>

<P><STRONG><a name="[27]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_can.o(.text.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; _can_rx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_can.o(.text.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; _can_rx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_can.o(.text.CAN1_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = CAN1_SCE_IRQHandler &rArr; _can_sce_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_sce_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_can.o(.text.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = CAN1_TX_IRQHandler &rArr; _can_tx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_tx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_can.o(.text.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; _can_rx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_can.o(.text.CAN2_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = CAN2_RX1_IRQHandler &rArr; _can_rx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_can.o(.text.CAN2_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = CAN2_SCE_IRQHandler &rArr; _can_sce_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_sce_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_can.o(.text.CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = CAN2_TX_IRQHandler &rArr; _can_tx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_tx_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[32a]"></a>Data_Analyse</STRONG> (Thumb, 432 bytes, Stack size 8 bytes, drv_action.o(.text.Data_Analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Data_Analyse
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_uart_rx_ind
</UL>

<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_gpio.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(.text.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(.text.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(.text.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(.text.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_gpio.o(.text.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1ca]"></a>FSUS_CalcChecksum</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fashion_star_uart_servo.o(.text.FSUS_CalcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSUS_CalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_RecvPackage
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SendPackage
</UL>

<P><STRONG><a name="[10c]"></a>FSUS_Init</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, fashion_star_uart_servo.o(.text.FSUS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = FSUS_Init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fashion_star_uart_servo.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[1c3]"></a>FSUS_Ping</STRONG> (Thumb, 124 bytes, Stack size 80 bytes, fashion_star_uart_servo.o(.text.FSUS_Ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = FSUS_Ping &rArr; FSUS_RecvPackage &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_RecvPackage
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SendPackage
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_process
</UL>

<P><STRONG><a name="[1c6]"></a>FSUS_RecvPackage</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, fashion_star_uart_servo.o(.text.FSUS_RecvPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = FSUS_RecvPackage &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_CalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Ping
</UL>

<P><STRONG><a name="[1c5]"></a>FSUS_SendPackage</STRONG> (Thumb, 112 bytes, Stack size 88 bytes, fashion_star_uart_servo.o(.text.FSUS_SendPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = FSUS_SendPackage &rArr; FSUS_UART_Send &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_CalcChecksum
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Ping
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_WheelMove
</UL>

<P><STRONG><a name="[1cb]"></a>FSUS_UART_Send</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fashion_star_uart_servo.o(.text.FSUS_UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = FSUS_UART_Send &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SendPackage
</UL>

<P><STRONG><a name="[1ce]"></a>FSUS_WheelMove</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, fashion_star_uart_servo.o(.text.FSUS_WheelMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = FSUS_WheelMove &rArr; FSUS_SendPackage &rArr; FSUS_UART_Send &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_SendPackage
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_WheelMoveTime
</UL>

<P><STRONG><a name="[1cf]"></a>FSUS_WheelMoveTime</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fashion_star_uart_servo.o(.text.FSUS_WheelMoveTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = FSUS_WheelMoveTime &rArr; FSUS_WheelMove &rArr; FSUS_SendPackage &rArr; FSUS_UART_Send &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_WheelMove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_FSUS_up
</UL>

<P><STRONG><a name="[7f]"></a>FSUS_process</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fashion_star_uart_servo.o(.text.FSUS_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = FSUS_process &rArr; My_FSUS_up &rArr; FSUS_WheelMoveTime &rArr; FSUS_WheelMove &rArr; FSUS_SendPackage &rArr; FSUS_UART_Send &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Ping
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_FSUS_up
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fashion_star_uart_servo.o(.text.FSUS_Init)
</UL>
<P><STRONG><a name="[1d3]"></a>GET_Infrared_Data</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, follow_line.o(.text.GET_Infrared_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = GET_Infrared_Data &rArr; rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_line
</UL>

<P><STRONG><a name="[43f]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 568 bytes, Stack size 20 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_enabled
</UL>

<P><STRONG><a name="[442]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_get_value
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_ADC_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_init
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_PollForConversion &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_get_value
</UL>

<P><STRONG><a name="[440]"></a>HAL_ADC_Start</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_enabled
</UL>

<P><STRONG><a name="[441]"></a>HAL_ADC_Stop</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_enabled
</UL>

<P><STRONG><a name="[26a]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_config
</UL>

<P><STRONG><a name="[276]"></a>HAL_CAN_GetRxFifoFillLevel</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_GetRxFifoFillLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_GetRxFifoFillLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
</UL>

<P><STRONG><a name="[275]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_recvmsg
</UL>

<P><STRONG><a name="[1da]"></a>HAL_CAN_Init</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_config
</UL>

<P><STRONG><a name="[1db]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, stm32f4xx_hal_msp.o(.text.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_CAN_Start</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(.text.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_CAN_Start &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_config
</UL>

<P><STRONG><a name="[1de]"></a>HAL_DMA_Abort</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Abort &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[21d]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1df]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_DeInit &rArr; DMA_CalcBaseAndBitshift
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_DMA_Init</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[224]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 604 bytes, Stack size 64 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_gpio.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_irq_hdr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; pin_irq_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_GPIO_Init</STRONG> (Thumb, 1006 bytes, Stack size 64 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[449]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
</UL>

<P><STRONG><a name="[44a]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_GetTick</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_common.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, drv_common.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; rt_hw_systick_init &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_InitTick</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, drv_common.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; rt_hw_systick_init &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_MspInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_DisableIRQ &rArr; __NVIC_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32f4xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PWREx_EnableOverDrive &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 610 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[44d]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_pclkx_doubler_get
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_clock_get
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_clock_get
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1726 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[448]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[200]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_PWMN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIMEx_PWMN_Start &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>

<P><STRONG><a name="[202]"></a>HAL_TIMEx_PWMN_Stop</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_PWMN_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIMEx_PWMN_Stop &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>

<P><STRONG><a name="[203]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[204]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, stm32f4xx_hal_msp.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[206]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[20b]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 522 bytes, Stack size 72 bytes, stm32f4xx_hal_msp.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[20c]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[211]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[212]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[213]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>

<P><STRONG><a name="[215]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>

<P><STRONG><a name="[21e]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[216]"></a>HAL_UART_DeInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[218]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_usart_v2.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = HAL_UART_ErrorCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[21a]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1054 bytes, Stack size 80 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[221]"></a>HAL_UART_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[217]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(.text.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[222]"></a>HAL_UART_MspInit</STRONG> (Thumb, 662 bytes, Stack size 80 bytes, stm32f4xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[225]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
</UL>

<P><STRONG><a name="[227]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drv_usart_v2.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_recv_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[229]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drv_usart_v2.o(.text.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = HAL_UART_RxHalfCpltCallback &rArr; dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_recv_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[22a]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_transmit
</UL>

<P><STRONG><a name="[22b]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, drv_usart_v2.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[23e]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[22f]"></a>Infrared_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, follow_line.o(.text.Infrared_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = Infrared_Init &rArr; rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_line
</UL>

<P><STRONG><a name="[34e]"></a>Is_Spacial_point</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, follow_line.o(.text.Is_Spacial_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Is_Spacial_point
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_line
</UL>

<P><STRONG><a name="[231]"></a>MotorVelocityCurve</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, trajectory_planning.o(.text.MotorVelocityCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MotorVelocityCurve &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mine_plan
</UL>

<P><STRONG><a name="[1d1]"></a>My_FSUS_up</STRONG> (Thumb, 124 bytes, Stack size 136 bytes, fashion_star_uart_servo.o(.text.My_FSUS_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = My_FSUS_up &rArr; FSUS_WheelMoveTime &rArr; FSUS_WheelMove &rArr; FSUS_SendPackage &rArr; FSUS_UART_Send &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_WheelMoveTime
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_process
</UL>

<P><STRONG><a name="[114]"></a>Robot_Move_Direct_Init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, robot_move_direct.o(.text.Robot_Move_Direct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = Robot_Move_Direct_Init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robot_move_direct.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[84]"></a>Robot_Move_Direct_Process</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, robot_move_direct.o(.text.Robot_Move_Direct_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = Robot_Move_Direct_Process &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robot_move_direct.o(.text.Robot_Move_Direct_Init)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_common.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[239]"></a>SystemClock_Config</STRONG> (Thumb, 232 bytes, Stack size 88 bytes, board.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; _Error_Handler &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[6b]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(.text)
</UL>
<P><STRONG><a name="[205]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 410 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[214]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
</UL>

<P><STRONG><a name="[207]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[20e]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[64]"></a>UART7_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_usart_v2.o(.text.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = UART7_IRQHandler &rArr; uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>UART8_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_usart_v2.o(.text.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = UART8_IRQHandler &rArr; uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[226]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_usart_v2.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = USART1_IRQHandler &rArr; uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_usart_v2.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = USART3_IRQHandler &rArr; uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART6_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_usart_v2.o(.text.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = USART6_IRQHandler &rArr; uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[23b]"></a>_Error_Handler</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, drv_common.o(.text._Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = _Error_Handler &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2]"></a>_PID_Hander</STRONG> (Thumb, 548 bytes, Stack size 48 bytes, apid.o(.text._PID_Hander))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _PID_Hander &rArr; __PID_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PID_Out
</UL>
<BR>[Address Reference Count : 3]<UL><LI> apid.o(.text.APID_Init)
<LI> motor_cfg.o(.data..compoundliteral.1)
<LI> motor_cfg.o(.data..compoundliteral.2)
</UL>
<P><STRONG><a name="[246]"></a>ConsoleSerial::ConsoleSerial__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN13ConsoleSerialC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ConsoleSerial::ConsoleSerial__sub_object() &rArr; HardwareSerial::HardwareSerial__sub_object(rt_device*)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial__sub_object(rt_device*)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[d3]"></a>ConsoleSerial::~ConsoleSerial__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN13ConsoleSerialD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = ConsoleSerial::~ConsoleSerial__deallocating() &rArr; operator delete(void*) &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleSerial::~ConsoleSerial__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV13ConsoleSerial)
</UL>
<P><STRONG><a name="[89]"></a>ConsoleSerial::~ConsoleSerial__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN13ConsoleSerialD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ConsoleSerial::~ConsoleSerial__sub_object() &rArr; HardwareSerial::~HardwareSerial__sub_object() &rArr; Stream::~Stream__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::~HardwareSerial__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleSerial::~ConsoleSerial__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hardwareserial.o(.text.__cxx_global_var_init)
<LI> hardwareserial.o(.rodata._ZTV13ConsoleSerial)
</UL>
<P><STRONG><a name="[ce]"></a>HardwareSerial::availableForWrite()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN14HardwareSerial17availableForWriteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HardwareSerial::availableForWrite()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV13ConsoleSerial)
</UL>
<P><STRONG><a name="[d2]"></a>HardwareSerial::peek()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN14HardwareSerial4peekEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HardwareSerial::peek()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV13ConsoleSerial)
</UL>
<P><STRONG><a name="[d1]"></a>HardwareSerial::read()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN14HardwareSerial4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HardwareSerial::read()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV13ConsoleSerial)
</UL>
<P><STRONG><a name="[cf]"></a>HardwareSerial::flush()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN14HardwareSerial5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HardwareSerial::flush()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV13ConsoleSerial)
</UL>
<P><STRONG><a name="[cd]"></a>HardwareSerial::write(unsigned char const*, unsigned int)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hardwareserial.o(.text._ZN14HardwareSerial5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = HardwareSerial::write(unsigned char const*, unsigned int) &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV13ConsoleSerial)
</UL>
<P><STRONG><a name="[cc]"></a>HardwareSerial::write(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN14HardwareSerial5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareSerial::write(unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV13ConsoleSerial)
</UL>
<P><STRONG><a name="[d0]"></a>HardwareSerial::available()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN14HardwareSerial9availableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HardwareSerial::available()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.rodata._ZTV13ConsoleSerial)
</UL>
<P><STRONG><a name="[24a]"></a>HardwareSerial::HardwareSerial(rt_device*)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hardwareserial.o(.text._ZN14HardwareSerialC2EP9rt_device), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::Stream__sub_object()
</UL>

<P><STRONG><a name="[248]"></a>HardwareSerial::HardwareSerial__sub_object(rt_device*)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, hardwareserial.o(.text._ZN14HardwareSerialC2EP9rt_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardwareSerial::HardwareSerial__sub_object(rt_device*)
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleSerial::ConsoleSerial__sub_object()
</UL>

<P><STRONG><a name="[d5]"></a>HardwareSerial::~HardwareSerial__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN14HardwareSerialD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = HardwareSerial::~HardwareSerial__deallocating() &rArr; operator delete(void*) &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::~HardwareSerial__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[d4]"></a>HardwareSerial::~HardwareSerial__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN14HardwareSerialD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HardwareSerial::~HardwareSerial__sub_object() &rArr; Stream::~Stream__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::~Stream__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::~HardwareSerial__deallocating()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleSerial::~ConsoleSerial__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[24c]"></a>Print::printNumber(unsigned long, unsigned char)</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, print.o(.text._ZN5Print11printNumberEmh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>

<P><STRONG><a name="[254]"></a>Print::setWriteError(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wire.o(.text._ZN5Print13setWriteErrorEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Print::setWriteError(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
</UL>

<P><STRONG><a name="[d8]"></a>Print::availableForWrite()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, print.o(.text._ZN5Print17availableForWriteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Print::availableForWrite()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> print.o(.rodata._ZTV5Print)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> wire.o(.rodata._ZTV7TwoWire)
</UL>
<P><STRONG><a name="[d9]"></a>Print::flush()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, print.o(.text._ZN5Print5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Print::flush()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> print.o(.rodata._ZTV5Print)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
</UL>
<P><STRONG><a name="[259]"></a>Print::print(char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(.text._ZN5Print5printEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::printTo(Print&) const
</UL>

<P><STRONG><a name="[24e]"></a>Print::print(unsigned char, int)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, print.o(.text._ZN5Print5printEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Print::print(unsigned char, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::printTo(Print&) const
</UL>

<P><STRONG><a name="[24f]"></a>Print::print(unsigned long, int)</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, print.o(.text._ZN5Print5printEmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
</UL>

<P><STRONG><a name="[24d]"></a>Print::write(char const*)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, print.o(.text._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Print::write(char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>

<P><STRONG><a name="[d7]"></a>Print::write(unsigned char const*, unsigned int)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, print.o(.text._ZN5Print5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::write(unsigned char const*, unsigned int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> print.o(.rodata._ZTV5Print)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
</UL>
<P><STRONG><a name="[251]"></a>Print::Print__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN5PrintC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Print::Print__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::Stream__sub_object()
</UL>

<P><STRONG><a name="[24b]"></a>Stream::Stream__sub_object()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN6StreamC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Stream::Stream__sub_object() &rArr; Print::Print__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::Print__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial(rt_device*)
</UL>

<P><STRONG><a name="[db]"></a>Stream::~Stream__deallocating()</STRONG> (Thumb, 6 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN6StreamD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Stream::~Stream__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV6Stream)
</UL>
<P><STRONG><a name="[da]"></a>Stream::~Stream__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Stream::~Stream__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::~TwoWire__sub_object()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::~HardwareSerial__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV6Stream)
</UL>
<P><STRONG><a name="[252]"></a>TwoWire::twi_transmit(unsigned char const*, unsigned char)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, wire.o(.text._ZN7TwoWire12twi_transmitEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = TwoWire::twi_transmit(unsigned char const*, unsigned char) &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char const*, unsigned int)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
</UL>

<P><STRONG><a name="[e1]"></a>TwoWire::peek()</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, wire.o(.text._ZN7TwoWire4peekEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TwoWire::peek()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.rodata._ZTV7TwoWire)
</UL>
<P><STRONG><a name="[e0]"></a>TwoWire::read()</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, wire.o(.text._ZN7TwoWire4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TwoWire::read()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.rodata._ZTV7TwoWire)
</UL>
<P><STRONG><a name="[de]"></a>TwoWire::flush()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, wire.o(.text._ZN7TwoWire5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TwoWire::flush()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.rodata._ZTV7TwoWire)
</UL>
<P><STRONG><a name="[dd]"></a>TwoWire::write(unsigned char const*, unsigned int)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, wire.o(.text._ZN7TwoWire5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = TwoWire::write(unsigned char const*, unsigned int) &rArr; TwoWire::twi_transmit(unsigned char const*, unsigned char) &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::twi_transmit(unsigned char const*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.rodata._ZTV7TwoWire)
</UL>
<P><STRONG><a name="[dc]"></a>TwoWire::write(unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wire.o(.text._ZN7TwoWire5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = TwoWire::write(unsigned char) &rArr; TwoWire::twi_transmit(unsigned char const*, unsigned char) &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::setWriteError(int)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::twi_transmit(unsigned char const*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.rodata._ZTV7TwoWire)
</UL>
<P><STRONG><a name="[df]"></a>TwoWire::available()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, wire.o(.text._ZN7TwoWire9availableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TwoWire::available()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.rodata._ZTV7TwoWire)
</UL>
<P><STRONG><a name="[255]"></a>TwoWire::TwoWire()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wire.o(.text._ZN7TwoWireC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TwoWire::TwoWire() &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::Stream__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[4c8]"></a>TwoWire::TwoWire__sub_object()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wire.o(.text._ZN7TwoWireC2Ev), UNUSED)

<P><STRONG><a name="[e2]"></a>TwoWire::~TwoWire__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wire.o(.text._ZN7TwoWireD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = TwoWire::~TwoWire__deallocating() &rArr; operator delete(void*) &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::~TwoWire__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.rodata._ZTV7TwoWire)
</UL>
<P><STRONG><a name="[8a]"></a>TwoWire::~TwoWire__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wire.o(.text._ZN7TwoWireD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TwoWire::~TwoWire__sub_object() &rArr; Stream::~Stream__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::~Stream__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::~TwoWire__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wire.o(.text.__cxx_global_var_init)
<LI> wire.o(.rodata._ZTV7TwoWire)
</UL>
<P><STRONG><a name="[257]"></a>IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ipaddress.o(.text._ZN9IPAddressC2Ehhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Printable::Printable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printable::Printable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[4c9]"></a>IPAddress::IPAddress__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ipaddress.o(.text._ZN9IPAddressC2Ehhhh), UNUSED)

<P><STRONG><a name="[258]"></a>Printable::Printable__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ipaddress.o(.text._ZN9PrintableC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Printable::Printable__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e3]"></a>IPAddress::printTo(Print&) const</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ipaddress.o(.text._ZNK9IPAddress7printToER5Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = IPAddress::printTo(Print&) const &rArr; Print::print(unsigned char, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(char const*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipaddress.o(.rodata._ZTV9IPAddress)
</UL>
<P><STRONG><a name="[249]"></a>operator delete(void*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cxx_crt.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = operator delete(void*) &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::~TwoWire__deallocating()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleSerial::~ConsoleSerial__deallocating()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::~HardwareSerial__deallocating()
</UL>

<P><STRONG><a name="[242]"></a>__PID_Out</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, apid.o(.text.__PID_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __PID_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID_Hander
</UL>

<P><STRONG><a name="[25b]"></a>__afifo_in</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, afifo.o(.text.__afifo_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __afifo_in
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_in
</UL>

<P><STRONG><a name="[25c]"></a>__afifo_out_data</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, afifo.o(.text.__afifo_out_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __afifo_out_data
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_out_data
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_out_data
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_out_data
</UL>

<P><STRONG><a name="[d6]"></a>__cxa_pure_virtual</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cxx_crt.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = __cxa_pure_virtual &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> print.o(.rodata._ZTV5Print)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> ipaddress.o(.rodata._ZTV9Printable)
</UL>
<P><STRONG><a name="[25f]"></a>__on_context_switch_in</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, perf_counter.o(.text.__on_context_switch_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __on_context_switch_in &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_thread_scheduler_hook
</UL>

<P><STRONG><a name="[261]"></a>__on_context_switch_out</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, perf_counter.o(.text.__on_context_switch_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __on_context_switch_out &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_thread_scheduler_hook
</UL>

<P><STRONG><a name="[129]"></a>__perf_counter_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, perf_counter.o(.text.__perf_counter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = __perf_counter_init &rArr; init_cycle_counter &rArr; update_perf_counter &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> perf_counter.o(.init_array)
</UL>
<P><STRONG><a name="[263]"></a>__perf_os_patch_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, perf_os_patch_rt_thread.o(.text.__perf_os_patch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __perf_os_patch_init &rArr; rt_tick_sethook
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_sethook
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_scheduler_sethook
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[2aa]"></a>__rt_ffs</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, cpuport.o(.text.__rt_ffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>

<P><STRONG><a name="[266]"></a>__rt_libc_exit</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, cstdlib.o(.text.__rt_libc_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8c]"></a>__rt_thread_scheduler_hook</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, perf_os_patch_rt_thread.o(.text.__rt_thread_scheduler_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __rt_thread_scheduler_hook &rArr; __on_context_switch_in &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_context_switch_in
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_context_switch_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> perf_os_patch_rt_thread.o(.text.__perf_os_patch_init)
</UL>
<P><STRONG><a name="[bf]"></a>_serial_poll_rx</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, serial_v2.o(.text._serial_poll_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_v2.o(.text.rt_serial_rx_enable)
</UL>
<P><STRONG><a name="[c1]"></a>_serial_poll_tx</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, serial_v2.o(.text._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_blocking_nbuf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_blocking_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_v2.o(.text.rt_serial_tx_enable)
</UL>
<P><STRONG><a name="[167]"></a>_sys_exit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, syscalls.o(.text._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2da]"></a>abus_acc_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, abus_topic.o(.text.abus_acc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = abus_acc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_all_init
</UL>

<P><STRONG><a name="[101]"></a>abus_all_init</STRONG> (Thumb, 728 bytes, Stack size 184 bytes, abus_port.o(.text.abus_all_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = abus_all_init &rArr; abus_topic_init &rArr; afifo_init &rArr; kmalloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_topic_subscribe
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_acc_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_topic_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abus_port.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[2dc]"></a>abus_public</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, abus_topic.o(.text.abus_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = abus_public &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_add_out
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_in
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_line
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbmg_error_callback
</UL>

<P><STRONG><a name="[2d8]"></a>abus_topic_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, abus_topic.o(.text.abus_topic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = abus_topic_init &rArr; afifo_init &rArr; kmalloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_all_init
</UL>

<P><STRONG><a name="[2db]"></a>abus_topic_subscribe</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, abus_topic.o(.text.abus_topic_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = abus_topic_subscribe &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_all_init
</UL>

<P><STRONG><a name="[2df]"></a>afifo_init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, afifo.o(.text.afifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = afifo_init &rArr; kmalloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUG_ON
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmalloc
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_of_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_topic_init
</UL>

<P><STRONG><a name="[a8]"></a>assert_hook</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cmb_port.o(.text.assert_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = assert_hook &rArr; rt_cm_backtrace_assert_hook &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmb_port.o(.text.rt_cm_backtrace_init)
</UL>
<P><STRONG><a name="[308]"></a>chassis_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, chassis.o(.text.chassis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chassis_init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_port_init
</UL>

<P><STRONG><a name="[98]"></a>chassis_port_handle</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, chassis_port.o(.text.chassis_port_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = chassis_port_handle &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_set_pos_plan
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_port.o(.text.chassis_port_init)
</UL>
<P><STRONG><a name="[113]"></a>chassis_port_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, chassis_port.o(.text.chassis_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = chassis_port_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_port.o(.rti_fn.5)
</UL>
<P><STRONG><a name="[97]"></a>chassis_port_plan</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, chassis_port.o(.text.chassis_port_plan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = chassis_port_plan &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mine_plan
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_port.o(.text.chassis_port_init)
</UL>
<P><STRONG><a name="[96]"></a>chassis_port_plan_init</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, chassis_port.o(.text.chassis_port_plan_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = chassis_port_plan_init &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mine_plan
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_port.o(.text.chassis_port_init)
</UL>
<P><STRONG><a name="[307]"></a>chassis_set_pos_plan</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, chassis.o(.text.chassis_set_pos_plan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = chassis_set_pos_plan &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_port_handle
</UL>

<P><STRONG><a name="[90]"></a>chassis_sub_callback</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, chassis_port.o(.text.chassis_sub_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = chassis_sub_callback &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_out_data
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abus_port.o(.text.abus_all_init)
</UL>
<P><STRONG><a name="[30b]"></a>cm_backtrace_assert</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, cm_backtrace.o(.text.cm_backtrace_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = cm_backtrace_assert &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_name
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
</UL>

<P><STRONG><a name="[311]"></a>cm_backtrace_call_stack</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, cm_backtrace.o(.text.cm_backtrace_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disassembly_ins_is_bl_blx
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[313]"></a>cm_backtrace_fault</STRONG> (Thumb, 952 bytes, Stack size 168 bytes, cm_backtrace.o(.text.cm_backtrace_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752 + Unknown Stack Size
<LI>Call Chain = cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statck_del_fpu_regs
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_name
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
</UL>

<P><STRONG><a name="[30c]"></a>cm_backtrace_firmware_info</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cm_backtrace.o(.text.cm_backtrace_firmware_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = cm_backtrace_firmware_info &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[316]"></a>cm_backtrace_init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, cm_backtrace.o(.text.cm_backtrace_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = cm_backtrace_init &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_init
</UL>

<P><STRONG><a name="[11c]"></a>cmb_test</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, cmb_port.o(.text.cmb_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = cmb_test &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmb_port.o(FSymTab)
</UL>
<P><STRONG><a name="[11d]"></a>cmd_canstat</STRONG> (Thumb, 348 bytes, Stack size 88 bytes, can.o(.text.cmd_canstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = cmd_canstat &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(FSymTab)
</UL>
<P><STRONG><a name="[9a]"></a>color_com</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, color_com.o(.text.color_com))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = color_com &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_com.o(.text.color_com_init)
</UL>
<P><STRONG><a name="[115]"></a>color_com_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, color_com.o(.text.color_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = color_com_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_com.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[111]"></a>cplusplus_system_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cxx_crt_init.o(.text.cplusplus_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cplusplus_system_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxx_crt_init.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[74]"></a>d_handle_Increment_Complete</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, apid.o(.text.d_handle_Increment_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = d_handle_Increment_Complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apid.o(.text.APID_Init)
</UL>
<P><STRONG><a name="[4]"></a>d_handle_Position_Complete</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, apid.o(.text.d_handle_Position_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = d_handle_Position_Complete
</UL>
<BR>[Address Reference Count : 3]<UL><LI> apid.o(.text.APID_Init)
<LI> motor_cfg.o(.data..compoundliteral.1)
<LI> motor_cfg.o(.data..compoundliteral.2)
</UL>
<P><STRONG><a name="[10d]"></a>dbus_uart_init</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, bsp_sbus.o(.text.dbus_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = dbus_uart_init &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_sbus.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[9b]"></a>dbus_uart_rx_ind</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, bsp_sbus.o(.text.dbus_uart_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = dbus_uart_rx_ind &rArr; rc_callback_handler &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_callback_handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_sbus.o(.text.dbus_uart_init)
</UL>
<P><STRONG><a name="[32b]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wiring.o(.text.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = delay &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[a7]"></a>exception_hook</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cmb_port.o(.text.exception_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808 + Unknown Stack Size
<LI>Call Chain = exception_hook &rArr; rt_cm_backtrace_exception_hook &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmb_port.o(.text.rt_cm_backtrace_init)
</UL>
<P><STRONG><a name="[33e]"></a>finsh_get_prompt</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, shell.o(.text.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = finsh_get_prompt &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[341]"></a>finsh_getchar</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, shell.o(.text.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = finsh_getchar &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[342]"></a>finsh_set_device</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, shell.o(.text.finsh_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[344]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, shell.o(.text.finsh_set_prompt_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = finsh_set_prompt_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[116]"></a>finsh_system_init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, shell.o(.text.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[9e]"></a>follow_line</STRONG> (Thumb, 656 bytes, Stack size 192 bytes, follow_line.o(.text.follow_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = follow_line &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Spacial_point
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_Infrared_Data
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared_Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_public
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> follow_line.o(.text.follow_line_init)
</UL>
<P><STRONG><a name="[10e]"></a>follow_line_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, follow_line.o(.text.follow_line_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = follow_line_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> follow_line.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[19d]"></a>free</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, syscall_mem.o(.text.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = free &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[303]"></a>get_system_ms</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, perf_counter.o(.text.get_system_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_system_ms &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_systick
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread
</UL>

<P><STRONG><a name="[260]"></a>get_system_ticks</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, perf_counter.o(.text.get_system_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_systick
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_usage_get_now_time
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_context_switch_in
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_context_switch_out
</UL>

<P><STRONG><a name="[73]"></a>i_handle_Increment_Normal</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, apid.o(.text.i_handle_Increment_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i_handle_Increment_Normal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> apid.o(.text.APID_Init)
<LI> apid_exfunc.o(.text.APID_SET_I_Function)
</UL>
<P><STRONG><a name="[77]"></a>i_handle_Increment_Saturation</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, apid.o(.text.i_handle_Increment_Saturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i_handle_Increment_Saturation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apid_exfunc.o(.text.APID_SET_I_Function)
</UL>
<P><STRONG><a name="[75]"></a>i_handle_Increment_Separation</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, apid.o(.text.i_handle_Increment_Separation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i_handle_Increment_Separation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apid_exfunc.o(.text.APID_SET_I_Function)
</UL>
<P><STRONG><a name="[79]"></a>i_handle_Increment_Speed</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, apid.o(.text.i_handle_Increment_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i_handle_Increment_Speed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apid_exfunc.o(.text.APID_SET_I_Function)
</UL>
<P><STRONG><a name="[7b]"></a>i_handle_Increment_Trapeziod</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, apid.o(.text.i_handle_Increment_Trapeziod))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i_handle_Increment_Trapeziod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apid_exfunc.o(.text.APID_SET_I_Function)
</UL>
<P><STRONG><a name="[3]"></a>i_handle_Position_Normal</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, apid.o(.text.i_handle_Position_Normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i_handle_Position_Normal
</UL>
<BR>[Address Reference Count : 4]<UL><LI> apid.o(.text.APID_Init)
<LI> apid_exfunc.o(.text.APID_SET_I_Function)
<LI> motor_cfg.o(.data..compoundliteral.1)
<LI> motor_cfg.o(.data..compoundliteral.2)
</UL>
<P><STRONG><a name="[78]"></a>i_handle_Position_Saturation</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, apid.o(.text.i_handle_Position_Saturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i_handle_Position_Saturation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apid_exfunc.o(.text.APID_SET_I_Function)
</UL>
<P><STRONG><a name="[76]"></a>i_handle_Position_Separation</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, apid.o(.text.i_handle_Position_Separation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i_handle_Position_Separation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apid_exfunc.o(.text.APID_SET_I_Function)
</UL>
<P><STRONG><a name="[7a]"></a>i_handle_Position_Speed</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, apid.o(.text.i_handle_Position_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i_handle_Position_Speed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apid_exfunc.o(.text.APID_SET_I_Function)
</UL>
<P><STRONG><a name="[7c]"></a>i_handle_Position_Trapeziod</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, apid.o(.text.i_handle_Position_Trapeziod))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i_handle_Position_Trapeziod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apid_exfunc.o(.text.APID_SET_I_Function)
</UL>
<P><STRONG><a name="[cb]"></a>ind_dj_can_motor_callback</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, motor_dj_rm_driver.o(.text.ind_dj_can_motor_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = ind_dj_can_motor_callback &rArr; rt_device_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_by_canid
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_feedback_pos
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_feedback_speed
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_feedback_torque
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_dj_rm_driver.o(.rodata..L__const.can_rx_thread.items)
</UL>
<P><STRONG><a name="[243]"></a>initVariant</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtduino.o(.text.initVariant))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtduino_init()
</UL>

<P><STRONG><a name="[262]"></a>init_cycle_counter</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, perf_counter.o(.text.init_cycle_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = init_cycle_counter &rArr; update_perf_counter &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_os_patch_init
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_counter_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_perf_counter_init
</UL>

<P><STRONG><a name="[2e9]"></a>is_power_of_2</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, afifo.o(.text.is_power_of_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_power_of_2
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_init
</UL>

<P><STRONG><a name="[72]"></a>isspace</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wstring.o(.text.isspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2eb]"></a>kmalloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, afifo.o(.text.kmalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = kmalloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_init
</UL>

<P><STRONG><a name="[8f]"></a>line_dir_sub_callback</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, follow_line.o(.text.line_dir_sub_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = line_dir_sub_callback &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_out_data
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abus_port.o(.text.abus_all_init)
</UL>
<P><STRONG><a name="[325]"></a>list_all_motor</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, motor.o(.text.list_all_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = list_all_motor &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_motor
</UL>

<P><STRONG><a name="[323]"></a>list_device</STRONG> (Thumb, 290 bytes, Stack size 112 bytes, cmd.o(.text.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = list_device &rArr; object_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[31f]"></a>list_event</STRONG> (Thumb, 306 bytes, Stack size 120 bytes, cmd.o(.text.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = list_event &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[321]"></a>list_mailbox</STRONG> (Thumb, 356 bytes, Stack size 144 bytes, cmd.o(.text.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = list_mailbox &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[322]"></a>list_msgqueue</STRONG> (Thumb, 332 bytes, Stack size 128 bytes, cmd.o(.text.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = list_msgqueue &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[320]"></a>list_mutex</STRONG> (Thumb, 382 bytes, Stack size 160 bytes, cmd.o(.text.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = list_mutex &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[31e]"></a>list_sem</STRONG> (Thumb, 332 bytes, Stack size 128 bytes, cmd.o(.text.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = list_sem &rArr; rt_susp_list_print &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[31c]"></a>list_thread</STRONG> (Thumb, 676 bytes, Stack size 344 bytes, cmd.o(.text.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_usage_get_now_time
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strerror
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[31d]"></a>list_timer</STRONG> (Thumb, 328 bytes, Stack size 104 bytes, cmd.o(.text.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[88]"></a>loop</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, applications_arduino_main.o(.text.loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = loop &rArr; delay &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtduino.o(.text._ZL12rtduino_initv)
</UL>
<P><STRONG><a name="[38c]"></a>$Super$$main</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = $Super$$main &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_pos
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mine_plan
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[18d]"></a>malloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, syscall_mem.o(.text.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = malloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_updata_cfg
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_all_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[309]"></a>mine_plan</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, trajectory_planning.o(.text.mine_plan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mine_plan &rArr; MotorVelocityCurve &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVelocityCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_port_plan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_port_plan_init
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[6]"></a>module_mai</STRONG> (Thumb, 2184 bytes, Stack size 360 bytes, chassis_module_mai.o(.text.module_mai))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = module_mai &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_module_mai.o(.data.ops_mai)
</UL>
<P><STRONG><a name="[a2]"></a>motor_behiver_1</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, motor.o(.text.motor_behiver_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = motor_behiver_1 &rArr; APID_Hander
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Get_Out
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Set_Present
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Set_Target
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Hander
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.text.motor_updata_cfg)
</UL>
<P><STRONG><a name="[a3]"></a>motor_behiver_2</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, motor.o(.text.motor_behiver_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = motor_behiver_2 &rArr; APID_Hander
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Get_Out
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Set_Present
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Set_Target
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Hander
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.text.motor_updata_cfg)
</UL>
<P><STRONG><a name="[a4]"></a>motor_behiver_3</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, motor.o(.text.motor_behiver_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = motor_behiver_3 &rArr; APID_Hander
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Get_Out
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Set_Present
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Set_Target
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Hander
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.text.motor_updata_cfg)
</UL>
<P><STRONG><a name="[a5]"></a>motor_behiver_4</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, motor.o(.text.motor_behiver_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = motor_behiver_4 &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.text.motor_updata_cfg)
</UL>
<P><STRONG><a name="[1]"></a>motor_dj_ctr</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, motor_dj_rm_driver.o(.text.motor_dj_ctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = motor_dj_ctr &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_start
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(.data..compoundliteral)
</UL>
<P><STRONG><a name="[0]"></a>motor_dj_driver</STRONG> (Thumb, 576 bytes, Stack size 96 bytes, motor_dj_rm_driver.o(.text.motor_dj_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = motor_dj_driver &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_cfg.o(.data..compoundliteral)
</UL>
<P><STRONG><a name="[10f]"></a>motor_dj_init</STRONG> (Thumb, 506 bytes, Stack size 64 bytes, motor_dj_rm_driver.o(.text.motor_dj_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = motor_dj_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_passive_feedback
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_dj_rm_driver.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[379]"></a>motor_feedback_pos</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, motor.o(.text.motor_feedback_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = motor_feedback_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_dj_can_motor_callback
</UL>

<P><STRONG><a name="[377]"></a>motor_feedback_speed</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, motor.o(.text.motor_feedback_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = motor_feedback_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_dj_can_motor_callback
</UL>

<P><STRONG><a name="[378]"></a>motor_feedback_torque</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, motor.o(.text.motor_feedback_torque))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = motor_feedback_torque
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_dj_can_motor_callback
</UL>

<P><STRONG><a name="[304]"></a>motor_get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, motor.o(.text.motor_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread1
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_ctr
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_driver
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_passive_feedback
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_updata_cfg
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_torque
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_pid_pos
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_pid_speed
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_torque
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_start
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_handle
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_4
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_3
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_2
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_behiver_1
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_pos
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_speed
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_pos
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_speed
</UL>

<P><STRONG><a name="[376]"></a>motor_get_by_canid</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, motor_dj_rm_driver.o(.text.motor_get_by_canid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = motor_get_by_canid
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_dj_can_motor_callback
</UL>

<P><STRONG><a name="[39b]"></a>motor_get_pid_pos</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, motor.o(.text.motor_get_pid_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_get_pid_pos &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_passive_feedback
</UL>

<P><STRONG><a name="[39c]"></a>motor_get_pid_speed</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, motor.o(.text.motor_get_pid_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_get_pid_speed &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_passive_feedback
</UL>

<P><STRONG><a name="[332]"></a>motor_get_pos</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, motor.o(.text.motor_get_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_get_pos &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_pos
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_mai
</UL>

<P><STRONG><a name="[331]"></a>motor_get_speed</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, motor.o(.text.motor_get_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_get_speed &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_speed
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_mai
</UL>

<P><STRONG><a name="[39d]"></a>motor_get_torque</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, motor.o(.text.motor_get_torque))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_get_torque &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_torque
</UL>

<P><STRONG><a name="[302]"></a>motor_handle</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, motor.o(.text.motor_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = motor_handle &rArr; __motor_read_feedback &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__motor_read_feedback
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread
</UL>

<P><STRONG><a name="[396]"></a>motor_init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, motor.o(.text.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = motor_init &rArr; motor_updata_cfg &rArr; malloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_updata_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
</UL>

<P><STRONG><a name="[3a1]"></a>motor_set_passive_feedback</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, motor.o(.text.motor_set_passive_feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = motor_set_passive_feedback &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_passive_feedback
</UL>

<P><STRONG><a name="[333]"></a>motor_set_pos</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, motor.o(.text.motor_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = motor_set_pos &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_pos
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_mai
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[306]"></a>motor_set_speed</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, motor.o(.text.motor_set_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = motor_set_speed &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread1
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_speed
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_mai
</UL>

<P><STRONG><a name="[3a2]"></a>motor_set_torque</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, motor.o(.text.motor_set_torque))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = motor_set_torque &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_torque
</UL>

<P><STRONG><a name="[395]"></a>motor_start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, motor.o(.text.motor_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_start &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_ctr
</UL>

<P><STRONG><a name="[394]"></a>motor_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, motor.o(.text.motor_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_stop &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_ctr
</UL>

<P><STRONG><a name="[3a0]"></a>motor_updata_cfg</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, motor.o(.text.motor_updata_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = motor_updata_cfg &rArr; malloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[3a3]"></a>msh_auto_complete</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, msh.o(.text.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[31b]"></a>msh_cmd_opt_id_get</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, msh.o(.text.msh_cmd_opt_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_cmd_opt_id_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_motor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[34b]"></a>msh_exec</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, msh.o(.text.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[297]"></a>msh_isint</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, msh_parse.o(.text.msh_isint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msh_isint &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
</UL>

<P><STRONG><a name="[3a8]"></a>msh_opt_auto_complete</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, msh.o(.text.msh_opt_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = msh_opt_auto_complete &rArr; msh_opt_complete &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_help
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd_opt
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_argc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[324]"></a>msh_opt_list_dump</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, msh.o(.text.msh_opt_list_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = msh_opt_list_dump &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_motor
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[100]"></a>power_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, aboard_power_switch.o(.text.power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = power_init &rArr; power_off &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aboard_power_switch.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[38e]"></a>power_off</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aboard_power_switch.o(.text.power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = power_off &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_init
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[38d]"></a>power_on</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aboard_power_switch.o(.text.power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = power_on &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[11f]"></a>pwm_list</STRONG> (Thumb, 1152 bytes, Stack size 144 bytes, rt_drv_pwm.o(.text.pwm_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = pwm_list &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_opt_id_get
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_get
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set_phase
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set_dead_time
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_disable
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[94]"></a>rbmg_chassis_ctrl_callback</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, robotmanager.o(.text.rbmg_chassis_ctrl_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rbmg_chassis_ctrl_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abus_port.o(.text.abus_all_init)
</UL>
<P><STRONG><a name="[92]"></a>rbmg_dir_callback</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, robotmanager.o(.text.rbmg_dir_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rbmg_dir_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abus_port.o(.text.abus_all_init)
</UL>
<P><STRONG><a name="[91]"></a>rbmg_error_callback</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, robotmanager.o(.text.rbmg_error_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = rbmg_error_callback &rArr; abus_public &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_out_data
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_public
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abus_port.o(.text.abus_all_init)
</UL>
<P><STRONG><a name="[93]"></a>rbmg_special_point_callback</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, robotmanager.o(.text.rbmg_special_point_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rbmg_special_point_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> abus_port.o(.text.abus_all_init)
</UL>
<P><STRONG><a name="[329]"></a>rc_callback_handler</STRONG> (Thumb, 738 bytes, Stack size 128 bytes, bsp_sbus.o(.text.rc_callback_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = rc_callback_handler &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_judge
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_uart_rx_ind
</UL>

<P><STRONG><a name="[2e5]"></a>rt_adc_disable</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, adc.o(.text.rt_adc_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_adc_disable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_get_vref
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[2e3]"></a>rt_adc_enable</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, adc.o(.text.rt_adc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_adc_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_get_vref
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[2e4]"></a>rt_adc_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, adc.o(.text.rt_adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_adc_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_get_vref
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[2e6]"></a>rt_adc_voltage</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, adc.o(.text.rt_adc_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = rt_adc_voltage &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adc_control
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[3c0]"></a>rt_application_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, components.o(.text.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[219]"></a>rt_assert_handler</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, kservice.o(.text.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_updata_cfg
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cantimeout
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_test
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_recvmsg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_sendmsg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_sce_isr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_tx_isr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_get_resolution
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_get_value
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_enabled
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_nonblocking
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_blocking_nbuf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_blocking_buf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_rx
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_get_linear_buffer
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_update_read_index
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_update_write_index
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_tx_disable
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_rx_disable
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_tx_enable
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_rx_enable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_voltage
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_disable
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_enable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_read
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_register
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_free
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_get
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_put
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_alloc
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_empty_blk_in_set
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_transmit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_putc
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_recv_isr
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_pclkx_doubler_get
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_enable_clock
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_set_suspend_state
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_stack_check
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_priv
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_system_heap_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_strcpy
</UL>

<P><STRONG><a name="[3c9]"></a>rt_assert_set_hook</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, kservice.o(.text.rt_assert_set_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_assert_set_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_init
</UL>

<P><STRONG><a name="[318]"></a>rt_backtrace</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, kservice.o(.text.rt_backtrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = rt_backtrace &rArr; rt_backtrace_frame &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_unwind
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[3c2]"></a>rt_backtrace_frame</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, kservice.o(.text.rt_backtrace_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + In Cycle
<LI>Call Chain = rt_backtrace_frame &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_unwind
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_thread
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>

<P><STRONG><a name="[319]"></a>rt_backtrace_thread</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, kservice.o(.text.rt_backtrace_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = rt_backtrace_thread &rArr; rt_backtrace_frame &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_get
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[346]"></a>rt_calloc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, kservice.o(.text.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[2f2]"></a>rt_cm_backtrace_assert_hook</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, cmb_port.o(.text.rt_cm_backtrace_assert_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744 + Unknown Stack Size
<LI>Call Chain = rt_cm_backtrace_assert_hook &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_hook
</UL>

<P><STRONG><a name="[33a]"></a>rt_cm_backtrace_exception_hook</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, cmb_port.o(.text.rt_cm_backtrace_exception_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792 + Unknown Stack Size
<LI>Call Chain = rt_cm_backtrace_exception_hook &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exception_hook
</UL>

<P><STRONG><a name="[10a]"></a>rt_cm_backtrace_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, cmb_port.o(.text.rt_cm_backtrace_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = rt_cm_backtrace_init &rArr; cm_backtrace_init &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_set_hook
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_exception_install
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmb_port.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[3ca]"></a>rt_completion_done</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, completion.o(.text.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_tx_disable
</UL>

<P><STRONG><a name="[272]"></a>rt_completion_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, completion.o(.text.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_tx_enable
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_rx_enable
</UL>

<P><STRONG><a name="[273]"></a>rt_completion_wait</STRONG> (Thumb, 526 bytes, Stack size 56 bytes, completion.o(.text.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = rt_completion_wait &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_blocking_nbuf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_blocking_buf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_rx
</UL>

<P><STRONG><a name="[3e0]"></a>rt_components_board_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, components.o(.text.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[38f]"></a>rt_components_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, components.o(.text.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[247]"></a>rt_console_get_device</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kservice.o(.text.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleSerial::ConsoleSerial__sub_object()
</UL>

<P><STRONG><a name="[3ce]"></a>rt_console_set_device</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, kservice.o(.text.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[29b]"></a>rt_critical_level</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scheduler_up.o(.text.rt_critical_level))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_scheduler_is_available
</UL>

<P><STRONG><a name="[343]"></a>rt_device_close</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, device.o(.text.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_device_close &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[300]"></a>rt_device_control</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, device.o(.text.rt_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_uart_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_canstat
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cantimeout
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_get
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set_phase
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set_dead_time
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_disable
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
</UL>

<P><STRONG><a name="[1b3]"></a>rt_device_find</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, device.o(.text.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_uart_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_canstat
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_com
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[1b5]"></a>rt_device_open</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, device.o(.text.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = rt_device_open &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_uart_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_com
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[3d4]"></a>rt_device_pin_register</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, pin.o(.text.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[3d6]"></a>rt_device_pwm_register</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, rt_drv_pwm.o(.text.rt_device_pwm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = rt_device_pwm_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_init
</UL>

<P><STRONG><a name="[1c8]"></a>rt_device_read</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, device.o(.text.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = rt_device_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_dj_can_motor_callback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_uart_rx_ind
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_RecvPackage
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_ind
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_uart_rx_ind
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[3d5]"></a>rt_device_register</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, device.o(.text.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_register
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
</UL>

<P><STRONG><a name="[1b6]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, device.o(.text.rt_device_set_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_uart_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_com
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[1cd]"></a>rt_device_write</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, device.o(.text.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_driver
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_FSUS_up
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_UART_Send
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kputs
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char const*, unsigned int)
</UL>

<P><STRONG><a name="[2bc]"></a>rt_enter_critical</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, scheduler_up.o(.text.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[3d9]"></a>rt_exit_critical</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, scheduler_up.o(.text.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; rt_reaet_time_thread_usage &rArr; rt_thread_usage_get_now_time &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>

<P><STRONG><a name="[2c3]"></a>rt_exit_critical_safe</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, scheduler_up.o(.text.rt_exit_critical_safe))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[25a]"></a>rt_free</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, kservice.o(.text.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_tx_disable
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_rx_disable
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_create
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_output
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtduino_sketch_loader_create_stacksize_prio
</UL>

<P><STRONG><a name="[3db]"></a>rt_hw_adc_register</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, adc.o(.text.rt_hw_adc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = rt_hw_adc_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_init
</UL>

<P><STRONG><a name="[3ee]"></a>rt_hw_atomic_add</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, atomic_arm.o(.text.rt_hw_atomic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_hw_atomic_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[3ef]"></a>rt_hw_atomic_load</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, atomic_arm.o(.text.rt_hw_atomic_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_atomic_load
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[3f0]"></a>rt_hw_atomic_sub</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, atomic_arm.o(.text.rt_hw_atomic_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_hw_atomic_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
</UL>

<P><STRONG><a name="[3c3]"></a>rt_hw_backtrace_frame_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, kservice.o(.text.rt_hw_backtrace_frame_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = rt_hw_backtrace_frame_get &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_thread
</UL>

<P><STRONG><a name="[3c1]"></a>rt_hw_backtrace_frame_unwind</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, kservice.o(.text.rt_hw_backtrace_frame_unwind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = rt_hw_backtrace_frame_unwind &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
</UL>

<P><STRONG><a name="[3dc]"></a>rt_hw_board_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, drv_common.o(.text.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = rt_hw_board_init &rArr; rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[103]"></a>rt_hw_can_init</STRONG> (Thumb, 356 bytes, Stack size 96 bytes, drv_can.o(.text.rt_hw_can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552 + Unknown Stack Size
<LI>Call Chain = rt_hw_can_init &rArr; rt_hw_can_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[277]"></a>rt_hw_can_isr</STRONG> (Thumb, 972 bytes, Stack size 80 bytes, can.o(.text.rt_hw_can_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_sce_isr
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_rx_isr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_tx_isr
</UL>

<P><STRONG><a name="[3e1]"></a>rt_hw_can_register</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, can.o(.text.rt_hw_can_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = rt_hw_can_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_init
</UL>

<P><STRONG><a name="[282]"></a>rt_hw_console_output</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, kservice.o(.text.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kputs
</UL>

<P><STRONG><a name="[3bf]"></a>rt_hw_cpu_reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cpuport.o(.text.rt_hw_cpu_reset))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>

<P><STRONG><a name="[3c8]"></a>rt_hw_exception_install</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, cpuport.o(.text.rt_hw_exception_install))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_hw_exception_install
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_init
</UL>

<P><STRONG><a name="[168]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, cpuport.o(.text.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[104]"></a>rt_hw_i2c_init</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, drv_soft_i2c.o(.text.rt_hw_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = rt_hw_i2c_init &rArr; rt_i2c_bit_add_bus &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bit_add_bus
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_bus_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_gpio_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[29a]"></a>rt_hw_interrupt_is_disabled</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, irq.o(.text.rt_hw_interrupt_is_disabled))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_scheduler_is_available
</UL>

<P><STRONG><a name="[3de]"></a>rt_hw_pin_init</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, drv_gpio.o(.text.rt_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[22e]"></a>rt_hw_serial_isr</STRONG> (Thumb, 532 bytes, Stack size 48 bytes, serial_v2.o(.text.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_get_linear_buffer
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_update_read_index
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_update_write_index
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_recv_isr
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[3e8]"></a>rt_hw_serial_register</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, serial_v2.o(.text.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[2ca]"></a>rt_hw_stack_init</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, cpuport.o(.text.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[1ed]"></a>rt_hw_systick_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, drv_common.o(.text.rt_hw_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_hw_systick_init &rArr; HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f4]"></a>rt_hw_us_delay</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, drv_common.o(.text.rt_hw_us_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_hw_us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_bus_unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.rodata.stm32_bit_ops_default)
</UL>
<P><STRONG><a name="[3df]"></a>rt_hw_usart_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, drv_usart_v2.o(.text.rt_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_get_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[3e4]"></a>rt_i2c_bit_add_bus</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, i2c-bit-ops.o(.text.rt_i2c_bit_add_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = rt_i2c_bit_add_bus &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[3ec]"></a>rt_i2c_bus_device_device_init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, i2c_dev.o(.text.rt_i2c_bus_device_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>

<P><STRONG><a name="[3eb]"></a>rt_i2c_bus_device_register</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, i2c_core.o(.text.rt_i2c_bus_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bit_add_bus
</UL>

<P><STRONG><a name="[36f]"></a>rt_i2c_control</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, i2c_core.o(.text.rt_i2c_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = rt_i2c_control &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
</UL>

<P><STRONG><a name="[370]"></a>rt_i2c_master_recv</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, i2c_core.o(.text.rt_i2c_master_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = rt_i2c_master_recv &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
</UL>

<P><STRONG><a name="[253]"></a>rt_i2c_master_send</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, i2c_core.o(.text.rt_i2c_master_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::twi_transmit(unsigned char const*, unsigned char)
</UL>

<P><STRONG><a name="[36e]"></a>rt_i2c_transfer</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, i2c_core.o(.text.rt_i2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = rt_i2c_transfer &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>

<P><STRONG><a name="[1b7]"></a>rt_interrupt_enter</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_interrupt_enter &rArr; rt_hw_atomic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SCE_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[29c]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, irq.o(.text.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_interrupt_get_nest &rArr; rt_hw_atomic_load
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_load
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_in_thread_context
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_buf
</UL>

<P><STRONG><a name="[1b9]"></a>rt_interrupt_leave</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, irq.o(.text.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_interrupt_leave &rArr; rt_hw_atomic_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SCE_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1c0]"></a>rt_kprintf</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, kservice.o(.text.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kputs
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_list_dump
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_motor
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_uart_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_canstat
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_test
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_get
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_help
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_stack_check
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>

<P><STRONG><a name="[3f2]"></a>rt_kputs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(.text.rt_kputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_kputs &rArr;  _kputs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_kputs
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>

<P><STRONG><a name="[2d9]"></a>rt_malloc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, kservice.o(.text.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_register
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kmalloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_all_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_tx_enable
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_rx_enable
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_create
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_output
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtduino_sketch_loader_create_stacksize_prio
</UL>

<P><STRONG><a name="[398]"></a>rt_mb_create</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, ipc.o(.text.rt_mb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
</UL>

<P><STRONG><a name="[1cc]"></a>rt_memcpy</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, kservice.o(.text.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_UART_Send
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[349]"></a>rt_memmove</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, kservice.o(.text.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[31a]"></a>rt_memory_info</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, kservice.o(.text.rt_memory_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = rt_memory_info &rArr; _heap_unlock &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_smem_info
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>

<P><STRONG><a name="[256]"></a>rt_memset</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, kservice.o(.text.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_enabled
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_tx_disable
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_tx_enable
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire()
</UL>

<P><STRONG><a name="[3f6]"></a>rt_mutex_detach</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ipc.o(.text.rt_mutex_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = rt_mutex_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</UL>

<P><STRONG><a name="[2c5]"></a>rt_mutex_drop_thread</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, ipc.o(.text.rt_mutex_drop_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = rt_mutex_drop_thread &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
</UL>

<P><STRONG><a name="[1bf]"></a>rt_mutex_init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ipc.o(.text.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</UL>

<P><STRONG><a name="[1c7]"></a>rt_mutex_release</STRONG> (Thumb, 602 bytes, Stack size 56 bytes, ipc.o(.text.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + In Cycle
<LI>Call Chain = rt_mutex_release &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Ping
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_WheelMove
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
</UL>

<P><STRONG><a name="[1c4]"></a>rt_mutex_take</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(.text.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_mutex_take &rArr; _rt_mutex_take &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Ping
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_WheelMove
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
</UL>

<P><STRONG><a name="[3f4]"></a>rt_object_allocate</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, object.o(.text.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[3d2]"></a>rt_object_delete</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, object.o(.text.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[3d1]"></a>rt_object_detach</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, object.o(.text.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[3d3]"></a>rt_object_find</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, object.o(.text.rt_object_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[386]"></a>rt_object_get_information</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, object.o(.text.rt_object_get_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>

<P><STRONG><a name="[29d]"></a>rt_object_get_type</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, object.o(.text.rt_object_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = rt_object_get_type &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
</UL>

<P><STRONG><a name="[3d8]"></a>rt_object_init</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, object.o(.text.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
</UL>

<P><STRONG><a name="[3d0]"></a>rt_object_is_systemobject</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, object.o(.text.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
</UL>

<P><STRONG><a name="[296]"></a>rt_pin_get</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pin.o(.text.rt_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = rt_pin_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
</UL>

<P><STRONG><a name="[230]"></a>rt_pin_mode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pin.o(.text.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_com
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_gpio_init
</UL>

<P><STRONG><a name="[1d4]"></a>rt_pin_read</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pin.o(.text.rt_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_Infrared_Data
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_get_scl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_get_sda
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_bus_unlock
</UL>

<P><STRONG><a name="[298]"></a>rt_pin_write</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pin.o(.text.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_ind
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_scl
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_sda
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_bus_unlock
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_gpio_init
</UL>

<P><STRONG><a name="[3b8]"></a>rt_pwm_disable</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, rt_drv_pwm.o(.text.rt_pwm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = rt_pwm_disable &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
</UL>

<P><STRONG><a name="[3b7]"></a>rt_pwm_enable</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, rt_drv_pwm.o(.text.rt_pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = rt_pwm_enable &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
</UL>

<P><STRONG><a name="[3b9]"></a>rt_pwm_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rt_drv_pwm.o(.text.rt_pwm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = rt_pwm_get &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
</UL>

<P><STRONG><a name="[3bb]"></a>rt_pwm_set</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, rt_drv_pwm.o(.text.rt_pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = rt_pwm_set &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
</UL>

<P><STRONG><a name="[3bd]"></a>rt_pwm_set_dead_time</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, rt_drv_pwm.o(.text.rt_pwm_set_dead_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = rt_pwm_set_dead_time &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
</UL>

<P><STRONG><a name="[3bc]"></a>rt_pwm_set_phase</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, rt_drv_pwm.o(.text.rt_pwm_set_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = rt_pwm_set_phase &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
</UL>

<P><STRONG><a name="[32d]"></a>rt_rbb_blk_alloc</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, ringblk_buf.o(.text.rt_rbb_blk_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = rt_rbb_blk_alloc &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_append
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_empty_blk_in_set
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>

<P><STRONG><a name="[400]"></a>rt_rbb_blk_free</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ringblk_buf.o(.text.rt_rbb_blk_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_rbb_blk_free &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_output
</UL>

<P><STRONG><a name="[403]"></a>rt_rbb_blk_get</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ringblk_buf.o(.text.rt_rbb_blk_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = rt_rbb_blk_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_first
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_output
</UL>

<P><STRONG><a name="[32f]"></a>rt_rbb_blk_put</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ringblk_buf.o(.text.rt_rbb_blk_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = rt_rbb_blk_put &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>

<P><STRONG><a name="[406]"></a>rt_rbb_create</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ringblk_buf.o(.text.rt_rbb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = rt_rbb_create &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</UL>

<P><STRONG><a name="[407]"></a>rt_rbb_init</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ringblk_buf.o(.text.rt_rbb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = rt_rbb_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_insert
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_create
</UL>

<P><STRONG><a name="[399]"></a>rt_ringbuffer_create</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ringbuffer.o(.text.rt_ringbuffer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = rt_ringbuffer_create &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
</UL>

<P><STRONG><a name="[2ae]"></a>rt_ringbuffer_data_len</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ringbuffer.o(.text.rt_ringbuffer_data_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_ringbuffer_data_len &rArr; rt_ringbuffer_status
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_rx
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_get_linear_buffer
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_update_read_index
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_update_write_index
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_output
</UL>

<P><STRONG><a name="[2af]"></a>rt_ringbuffer_get</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, ringbuffer.o(.text.rt_ringbuffer_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = rt_ringbuffer_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_rx
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_output
</UL>

<P><STRONG><a name="[301]"></a>rt_ringbuffer_getchar</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ringbuffer.o(.text.rt_ringbuffer_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_ringbuffer_getchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[40b]"></a>rt_ringbuffer_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ringbuffer.o(.text.rt_ringbuffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_ringbuffer_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_create
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_tx_enable
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_rx_enable
</UL>

<P><STRONG><a name="[2b0]"></a>rt_ringbuffer_put</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ringbuffer.o(.text.rt_ringbuffer_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = rt_ringbuffer_put &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_nonblocking
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_blocking_buf
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>

<P><STRONG><a name="[40d]"></a>rt_ringbuffer_putchar</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ringbuffer.o(.text.rt_ringbuffer_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_ringbuffer_putchar &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[37a]"></a>rt_ringbuffer_putchar_force</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, ringbuffer.o(.text.rt_ringbuffer_putchar_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = rt_ringbuffer_putchar_force &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_dj_can_motor_callback
</UL>

<P><STRONG><a name="[2d3]"></a>rt_sched_insert_thread</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, scheduler_up.o(.text.rt_sched_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_sched_insert_thread &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[28a]"></a>rt_sched_lock</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, scheduler_up.o(.text.rt_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_sched_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[2be]"></a>rt_sched_remove_thread</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, scheduler_up.o(.text.rt_sched_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + In Cycle
<LI>Call Chain = rt_sched_remove_thread &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[42f]"></a>rt_sched_thread_bind_cpu</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, scheduler_up.o(.text.rt_sched_thread_bind_cpu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sched_thread_bind_cpu
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[27b]"></a>rt_sched_thread_change_priority</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, scheduler_comm.o(.text.rt_sched_thread_change_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = rt_sched_thread_change_priority &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
</UL>

<P><STRONG><a name="[2c0]"></a>rt_sched_thread_close</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, scheduler_comm.o(.text.rt_sched_thread_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_sched_thread_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[279]"></a>rt_sched_thread_get_curr_prio</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, scheduler_comm.o(.text.rt_sched_thread_get_curr_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_sched_thread_get_curr_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_update_priority
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
</UL>

<P><STRONG><a name="[2c7]"></a>rt_sched_thread_get_init_prio</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, scheduler_comm.o(.text.rt_sched_thread_get_init_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_sched_thread_get_init_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
</UL>

<P><STRONG><a name="[2bd]"></a>rt_sched_thread_get_stat</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, scheduler_comm.o(.text.rt_sched_thread_get_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_sched_thread_get_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
</UL>

<P><STRONG><a name="[2c9]"></a>rt_sched_thread_init_ctx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, scheduler_comm.o(.text.rt_sched_thread_init_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = rt_sched_thread_init_ctx &rArr; rt_sched_thread_init_priv &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[412]"></a>rt_sched_thread_init_priv</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, scheduler_up.o(.text.rt_sched_thread_init_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_sched_thread_init_priv &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_ctx
</UL>

<P><STRONG><a name="[2d1]"></a>rt_sched_thread_is_suspended</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, scheduler_comm.o(.text.rt_sched_thread_is_suspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_sched_thread_is_suspended
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[3f7]"></a>rt_sched_thread_ready</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, scheduler_comm.o(.text.rt_sched_thread_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rt_sched_thread_ready &rArr; rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_stop
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[434]"></a>rt_sched_thread_startup</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, scheduler_up.o(.text.rt_sched_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_sched_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>

<P><STRONG><a name="[437]"></a>rt_sched_thread_timer_start</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, scheduler_comm.o(.text.rt_sched_thread_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_sched_thread_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[414]"></a>rt_sched_thread_timer_stop</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, scheduler_comm.o(.text.rt_sched_thread_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_sched_thread_timer_stop &rArr; rt_timer_stop &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
</UL>

<P><STRONG><a name="[417]"></a>rt_sched_thread_yield</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, scheduler_comm.o(.text.rt_sched_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_sched_thread_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
</UL>

<P><STRONG><a name="[416]"></a>rt_sched_tick_increase</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, scheduler_comm.o(.text.rt_sched_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = rt_sched_tick_increase &rArr; rt_sched_unlock_n_resched &rArr; rt_schedule &rArr; rt_reaet_time_thread_usage &rArr; rt_thread_usage_get_now_time &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[28c]"></a>rt_sched_unlock</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, scheduler_up.o(.text.rt_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_sched_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_print
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[28b]"></a>rt_sched_unlock_n_resched</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, scheduler_up.o(.text.rt_sched_unlock_n_resched))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = rt_sched_unlock_n_resched &rArr; rt_schedule &rArr; rt_reaet_time_thread_usage &rArr; rt_thread_usage_get_now_time &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[2a3]"></a>rt_schedule</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, scheduler_up.o(.text.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = rt_schedule &rArr; rt_reaet_time_thread_usage &rArr; rt_thread_usage_get_now_time &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_reaet_time_thread_usage
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_stack_check
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_uasge_get_interval_time
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[265]"></a>rt_scheduler_sethook</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, scheduler_up.o(.text.rt_scheduler_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_scheduler_sethook
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_os_patch_init
</UL>

<P><STRONG><a name="[2d7]"></a>rt_sem_control</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, ipc.o(.text.rt_sem_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = rt_sem_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_waiting_log
</UL>

<P><STRONG><a name="[3c5]"></a>rt_sem_detach</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ipc.o(.text.rt_sem_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = rt_sem_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
</UL>

<P><STRONG><a name="[1be]"></a>rt_sem_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</UL>

<P><STRONG><a name="[1d2]"></a>rt_sem_release</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = rt_sem_release &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_uart_receive_callback1
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>

<P><STRONG><a name="[1c9]"></a>rt_sem_take</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(.text.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = rt_sem_take &rArr; _rt_sem_take &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_RecvPackage
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_waiting_log
</UL>

<P><STRONG><a name="[3d7]"></a>rt_set_errno</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, kservice.o(.text.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest &rArr; rt_hw_atomic_load
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>

<P><STRONG><a name="[420]"></a>rt_show_version</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, kservice.o(.text.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[3f3]"></a>rt_smem_alloc</STRONG> (Thumb, 710 bytes, Stack size 48 bytes, mem.o(.text.rt_smem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[3da]"></a>rt_smem_free</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, mem.o(.text.rt_smem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[2a8]"></a>rt_smem_init</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, mem.o(.text.rt_smem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = rt_smem_init &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_system_heap_init
</UL>

<P><STRONG><a name="[421]"></a>rt_snprintf</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, kservice.o(.text.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; update_normalization &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
</UL>

<P><STRONG><a name="[3c7]"></a>rt_sprintf</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, kservice.o(.text.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; update_normalization &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
</UL>

<P><STRONG><a name="[26c]"></a>rt_strcmp</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, kservice.o(.text.rt_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[387]"></a>rt_strerror</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, kservice.o(.text.rt_strerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[317]"></a>rt_strlen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, kservice.o(.text.rt_strlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_test
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_get
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>

<P><STRONG><a name="[3fc]"></a>rt_strncmp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, kservice.o(.text.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[32e]"></a>rt_strncpy</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, kservice.o(.text.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>

<P><STRONG><a name="[41b]"></a>rt_susp_list_dequeue</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ipc.o(.text.rt_susp_list_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + In Cycle
<LI>Call Chain = rt_susp_list_dequeue &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
</UL>

<P><STRONG><a name="[2d4]"></a>rt_susp_list_enqueue</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, ipc.o(.text.rt_susp_list_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = rt_susp_list_enqueue &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[385]"></a>rt_susp_list_print</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ipc.o(.text.rt_susp_list_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = rt_susp_list_print &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[288]"></a>rt_susp_list_resume_all</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ipc.o(.text.rt_susp_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = rt_susp_list_resume_all &rArr; rt_susp_list_dequeue &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>

<P><STRONG><a name="[3dd]"></a>rt_system_heap_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, kservice.o(.text.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = rt_system_heap_init &rArr; _rt_system_heap_init &rArr; rt_smem_init &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_system_heap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[426]"></a>rt_system_scheduler_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, scheduler_up.o(.text.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_system_scheduler_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[427]"></a>rt_system_scheduler_start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, scheduler_up.o(.text.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_system_scheduler_start &rArr; _scheduler_get_highest_priority_thread &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[429]"></a>rt_system_timer_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timer.o(.text.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_system_timer_init &rArr; rt_spin_lock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[42b]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, timer.o(.text.rt_system_timer_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = rt_system_timer_thread_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[268]"></a>rt_thread_control</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, thread.o(.text.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = rt_thread_control &rArr; rt_thread_delete &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_bind_cpu
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>

<P><STRONG><a name="[1c1]"></a>rt_thread_create</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, thread.o(.text.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_line_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_port_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_com_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Move_Direct_Init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtduino_sketch_loader_create_stacksize_prio
</UL>

<P><STRONG><a name="[3cf]"></a>rt_thread_defunct_dequeue</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, idle.o(.text.rt_thread_defunct_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_thread_defunct_dequeue &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[2c2]"></a>rt_thread_defunct_enqueue</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, idle.o(.text.rt_thread_defunct_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_defunct_enqueue &rArr; rt_spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[234]"></a>rt_thread_delay</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = rt_thread_delay &rArr; _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Move_Direct_Process
</UL>

<P><STRONG><a name="[42e]"></a>rt_thread_delete</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = rt_thread_delete &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[42d]"></a>rt_thread_detach</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = rt_thread_detach &rArr; _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[432]"></a>rt_thread_idle_init</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, idle.o(.text.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[42c]"></a>rt_thread_init</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, thread.o(.text.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
</UL>

<P><STRONG><a name="[1d0]"></a>rt_thread_mdelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_line
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_port_handle
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_process
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_FSUS_up
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_com
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[3cd]"></a>rt_thread_resume</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[267]"></a>rt_thread_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, thread.o(.text.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_name
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_blocking_nbuf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_blocking_buf
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_frame
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_backtrace
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_in_thread_context
</UL>

<P><STRONG><a name="[1c2]"></a>rt_thread_startup</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_line_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_port_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_Init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_com_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Move_Direct_Init
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtduino_sketch_loader_create_stacksize_prio
</UL>

<P><STRONG><a name="[2a0]"></a>rt_thread_suspend_to_list</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, thread.o(.text.rt_thread_suspend_to_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + In Cycle
<LI>Call Chain = rt_thread_suspend_to_list &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_set_suspend_state
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_stat
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[2d0]"></a>rt_thread_suspend_with_flag</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_suspend_with_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = rt_thread_suspend_with_flag &rArr; rt_thread_suspend_to_list &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>

<P><STRONG><a name="[388]"></a>rt_thread_usage_get_now_time</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, scheduler_up.o(.text.rt_thread_usage_get_now_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_thread_usage_get_now_time &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_reaet_time_thread_usage
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_uasge_get_interval_time
</UL>

<P><STRONG><a name="[433]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, clock.o(.text.rt_tick_from_millisecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[236]"></a>rt_tick_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, clock.o(.text.rt_tick_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_tick_get &rArr; rt_hw_atomic_load
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_load
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_timer_check
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
</UL>

<P><STRONG><a name="[238]"></a>rt_tick_increase</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, clock.o(.text.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_tick_increase
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_atomic_add
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[264]"></a>rt_tick_sethook</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clock.o(.text.rt_tick_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_tick_sethook
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_os_patch_init
</UL>

<P><STRONG><a name="[435]"></a>rt_timer_check</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = rt_timer_check &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[2a1]"></a>rt_timer_control</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = rt_timer_control &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerlock_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>

<P><STRONG><a name="[39a]"></a>rt_timer_create</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, timer.o(.text.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
</UL>

<P><STRONG><a name="[2bf]"></a>rt_timer_detach</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, timer.o(.text.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerlock_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[2cc]"></a>rt_timer_init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[2a2]"></a>rt_timer_start</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, timer.o(.text.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + In Cycle
<LI>Call Chain = rt_timer_start &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_sleep
</UL>

<P><STRONG><a name="[3c4]"></a>rt_timer_stop</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, timer.o(.text.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = rt_timer_stop &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timerlock_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_timer_stop
</UL>

<P><STRONG><a name="[3f1]"></a>rt_vsnprintf</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, rt_vsnprintf.o(.text.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; update_normalization &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf_impl
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_gadget
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[424]"></a>rt_vsprintf</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, kservice.o(.text.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; update_normalization &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[245]"></a>rtduino_sketch_loader_create_stacksize_prio</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, rtduino.o(.text.rtduino_sketch_loader_create_stacksize_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = rtduino_sketch_loader_create_stacksize_prio &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtduino_sketch_loader_create(char const*, void (*)(), void (*)())
</UL>

<P><STRONG><a name="[1ac]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(.text.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = rtthread_startup &rArr; rt_hw_board_init &rArr; rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[328]"></a>set_get_pos</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, motor.o(.text.set_get_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = set_get_pos &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_pos
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_pos
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_motor
</UL>

<P><STRONG><a name="[327]"></a>set_get_speed</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, motor.o(.text.set_get_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = set_get_speed &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_speed
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_speed
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_motor
</UL>

<P><STRONG><a name="[326]"></a>set_get_torque</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, motor.o(.text.set_get_torque))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = set_get_torque &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_torque
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_torque
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_motor
</UL>

<P><STRONG><a name="[87]"></a>setup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, applications_arduino_main.o(.text.setup))
<BR>[Address Reference Count : 1]<UL><LI> rtduino.o(.text._ZL12rtduino_initv)
</UL>
<P><STRONG><a name="[2e7]"></a>spin_lock_irqrestore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, afifo.o(.text.spin_lock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spin_lock_irqrestore
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_out_data
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_out_data
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_out_data
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_in
</UL>

<P><STRONG><a name="[2e8]"></a>spin_unlock_irqrestore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, afifo.o(.text.spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spin_unlock_irqrestore
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_out_data
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_out_data
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_out_data
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afifo_in
</UL>

<P><STRONG><a name="[447]"></a>stm32_tim_enable_clock</STRONG> (Thumb, 816 bytes, Stack size 72 bytes, drv_tim.o(.text.stm32_tim_enable_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = stm32_tim_enable_clock &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>

<P><STRONG><a name="[44c]"></a>stm32_tim_pclkx_doubler_get</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, drv_tim.o(.text.stm32_tim_pclkx_doubler_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = stm32_tim_pclkx_doubler_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_clock_get
</UL>

<P><STRONG><a name="[445]"></a>stm32_uart_get_mask</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, drv_usart_v2.o(.text.stm32_uart_get_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stm32_uart_get_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[3be]"></a>sw_judge</STRONG> (Thumb, 440 bytes, Stack size 4 bytes, bsp_sbus.o(.text.sw_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sw_judge
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_callback_handler
</UL>

<P><STRONG><a name="[99]"></a>uart_rx_ind</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, color_com.o(.text.uart_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = uart_rx_ind &rArr; rt_device_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color_com.o(.text.color_com)
</UL>
<P><STRONG><a name="[108]"></a>ulog_async_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ulog.o(.text.ulog_async_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = ulog_async_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ulog.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[2f3]"></a>ulog_async_output</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ulog.o(.text.ulog_async_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_free
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_output_thread_entry
</UL>

<P><STRONG><a name="[2f4]"></a>ulog_async_waiting_log</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ulog.o(.text.ulog_async_waiting_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = ulog_async_waiting_log &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_output_thread_entry
</UL>

<P><STRONG><a name="[44e]"></a>ulog_backend_register</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, ulog.o(.text.ulog_backend_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = ulog_backend_register &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_append
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_init
</UL>

<P><STRONG><a name="[109]"></a>ulog_console_backend_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, console_be.o(.text.ulog_console_backend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = ulog_console_backend_init &rArr; ulog_init &rArr; rt_rbb_create &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_be.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[ca]"></a>ulog_console_backend_output</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, console_be.o(.text.ulog_console_backend_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ulog_console_backend_output &rArr; rt_kputs &rArr;  _kputs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_be.o(.text.ulog_console_backend_init)
</UL>
<P><STRONG><a name="[2f5]"></a>ulog_flush</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ulog.o(.text.ulog_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_output
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_first
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_output_thread_entry
</UL>

<P><STRONG><a name="[452]"></a>ulog_formater</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ulog.o(.text.ulog_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + In Cycle
<LI>Call Chain = ulog_formater &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[453]"></a>ulog_head_formater</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, ulog.o(.text.ulog_head_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = ulog_head_formater &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_ultoa
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[457]"></a>ulog_hex_formater</STRONG> (Thumb, 630 bytes, Stack size 64 bytes, ulog.o(.text.ulog_hex_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + In Cycle
<LI>Call Chain = ulog_hex_formater &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[105]"></a>ulog_init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ulog.o(.text.ulog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = ulog_init &rArr; rt_rbb_create &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_create
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ulog.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1b4]"></a>ulog_output</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, ulog.o(.text.ulog_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_call
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_ctr
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_driver
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_pos
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_speed
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_torque
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_all_motor
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_port_plan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_port_plan_init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_set_pos_plan
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbus_uart_init
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_callback_handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_public
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_sub_callback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_dir_sub_callback
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_topic_subscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSUS_process
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_thread_stack_info
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_assert_hook
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_cm_backtrace_exception_hook
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_com
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_enabled
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_rx
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_update_write_index
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_tx_enable
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_rx_enable
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_control
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_unwind
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_backtrace_frame_get
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_perf_counter_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial(rt_device*)
</UL>

<P><STRONG><a name="[455]"></a>ulog_strcpy</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ulog.o(.text.ulog_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = ulog_strcpy &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_tail_formater
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
</UL>

<P><STRONG><a name="[454]"></a>ulog_tail_formater</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ulog.o(.text.ulog_tail_formater))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = ulog_tail_formater &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
</UL>

<P><STRONG><a name="[456]"></a>ulog_ultoa</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ulog.o(.text.ulog_ultoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ulog_ultoa
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_head_formater
</UL>

<P><STRONG><a name="[459]"></a>ulog_voutput</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, ulog.o(.text.ulog_voutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + In Cycle
<LI>Call Chain = ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_hex_formater
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_formater
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>

<P><STRONG><a name="[37c]"></a>update_perf_counter</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, perf_counter.o(.text.update_perf_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = update_perf_counter &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[8b]"></a>user_code_insert_to_systick_handler</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, perf_counter.o(.text.user_code_insert_to_systick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = user_code_insert_to_systick_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> perf_os_patch_rt_thread.o(.text.__perf_os_patch_init)
</UL>
<P><STRONG><a name="[119]"></a>var</STRONG> (Thumb, 1044 bytes, Stack size 56 bytes, apid_exfunc.o(.text.var))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = var &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> apid_exfunc.o(FSymTab)
</UL>
<P><STRONG><a name="[305]"></a>var_register</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, apid_exfunc.o(.text.var_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = var_register &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_thread1
</UL>

<P><STRONG><a name="[193]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[45c]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[45b]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[45f]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[45d]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[45e]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[194]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a3]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[195]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a2]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[460]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[197]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[468]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[461]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[439]"></a>__hardfp_atof</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_pos
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_speed
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_torque
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var
</UL>

<P><STRONG><a name="[1bc]"></a>__hardfp_expf</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCurveSPTA
</UL>

<P><STRONG><a name="[4ca]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[469]"></a>__hardfp_ldexp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[30a]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_port_plan_init
</UL>

<P><STRONG><a name="[46c]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[46b]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[466]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[467]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[465]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1a7]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1ab]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[187]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[462]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[6d]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[159]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_dj_can_motor_callback
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_pos
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_speed
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_torque
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_line
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mai
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_SET_I_Function
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVelocityCurve
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[46d]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[34c]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_line
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mai
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
</UL>

<P><STRONG><a name="[470]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[473]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[477]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[2f1]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mai
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_normalization
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unapply_scaling
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_scaling
</UL>

<P><STRONG><a name="[475]"></a>_ddiv</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[463]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[476]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[2fa]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bastardized_floor
</UL>

<P><STRONG><a name="[478]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2fb]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_line
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bastardized_floor
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
</UL>

<P><STRONG><a name="[4cb]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[359]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[4cc]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[3ba]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
</UL>

<P><STRONG><a name="[4cd]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[4ce]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[479]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[4cf]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[47a]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[47d]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[2f0]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_dj_can_motor_callback
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_line
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mai
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_list
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_normalization
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unapply_scaling
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_scaling
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[47b]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[46f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[472]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[464]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[47c]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[34d]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_line
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mai
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
</UL>

<P><STRONG><a name="[47e]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_dj_can_motor_callback
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_pos
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_speed
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_torque
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_port_plan
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mai
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_set_pos_plan
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Set_Integral_Limit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVelocityCurve
</UL>

<P><STRONG><a name="[480]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[2fc]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bastardized_floor
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[482]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[483]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[232]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorVelocityCurve
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[484]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[35b]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[485]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[35a]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[486]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[2f9]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bastardized_floor
</UL>

<P><STRONG><a name="[487]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[389]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[4d0]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[39e]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_handle
</UL>

<P><STRONG><a name="[4d1]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[481]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_f
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[154]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[4d2]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[4d3]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[46e]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1a1]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[358]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
</UL>

<P><STRONG><a name="[488]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[39f]"></a>__aeabi_f2lz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixll.o(x$fpl$llsfromf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_handle
</UL>

<P><STRONG><a name="[489]"></a>_ll_sfrom_f</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ffixll.o(x$fpl$llsfromf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[136]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[13a]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[474]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[46a]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[18b]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[1a6]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1a5]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[48a]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7e]"></a>FSUS_uart_receive_callback1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fashion_star_uart_servo.o(.text.FSUS_uart_receive_callback1))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FSUS_uart_receive_callback1 &rArr; rt_sem_release &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fashion_star_uart_servo.o(.text.FSUS_Init)
</UL>
<P><STRONG><a name="[118]"></a>power_switch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aboard_power_switch.o(.text.power_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = power_switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aboard_power_switch.o(FSymTab)
</UL>
<P><STRONG><a name="[2e0]"></a>INIT_LIST_HEAD</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, abus_topic.o(.text.INIT_LIST_HEAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = INIT_LIST_HEAD
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_topic_init
</UL>

<P><STRONG><a name="[2e1]"></a>list_add</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, abus_topic.o(.text.list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = list_add &rArr; __list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_topic_subscribe
</UL>

<P><STRONG><a name="[2dd]"></a>afifo_in</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, abus_topic.o(.text.afifo_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = afifo_in &rArr; __afifo_in
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_unlock_irqrestore
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__afifo_in
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_lock_irqrestore
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_public
</UL>

<P><STRONG><a name="[2de]"></a>afifo_add_out</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, abus_topic.o(.text.afifo_add_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = afifo_add_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abus_public
</UL>

<P><STRONG><a name="[37d]"></a>__list_add</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, abus_topic.o(.text.__list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>

<P><STRONG><a name="[7]"></a>driver_mai</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, chassis_module_mai.o(.text.driver_mai))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = driver_mai &rArr; motor_set_pos &rArr; motor_get
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_pos
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_speed
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_pos
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_speed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_module_mai.o(.data.ops_mai)
</UL>
<P><STRONG><a name="[2ec]"></a>afifo_out_data</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, chassis_port.o(.text.afifo_out_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = afifo_out_data &rArr; __afifo_out_data
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__afifo_out_data
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_unlock_irqrestore
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_lock_irqrestore
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_sub_callback
</UL>

<P><STRONG><a name="[2ed]"></a>afifo_out_data</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, follow_line.o(.text.afifo_out_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = afifo_out_data &rArr; __afifo_out_data
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__afifo_out_data
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_unlock_irqrestore
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_lock_irqrestore
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_dir_sub_callback
</UL>

<P><STRONG><a name="[25d]"></a>__motor_read_feedback</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, motor.o(.text.__motor_read_feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __motor_read_feedback &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_handle
</UL>

<P><STRONG><a name="[11a]"></a>start_shakdown</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, motor.o(.text.start_shakdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = start_shakdown &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(FSymTab)
</UL>
<P><STRONG><a name="[11b]"></a>cmd_motor</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, motor.o(.text.cmd_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = cmd_motor &rArr; msh_opt_list_dump &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_list_dump
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_opt_id_get
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_pos
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_speed
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_get_torque
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_all_motor
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(FSymTab)
</UL>
<P><STRONG><a name="[397]"></a>set_motor_passive_feedback</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, motor_dj_rm_driver.o(.text.set_motor_passive_feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_motor_passive_feedback &rArr; APID_Set_Integral_Limit &rArr; APID_SET_I_Function &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_passive_feedback
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_pid_pos
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_pid_speed
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Set_Integral_Limit
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Set_Out_Limit
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Set_Bias_Dead_Zone
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APID_Set_Bias_Limit
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_dj_init
</UL>

<P><STRONG><a name="[9f]"></a>timer1_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, motor_dj_rm_driver.o(.text.timer1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer1_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_dj_rm_driver.o(.text.motor_dj_init)
</UL>
<P><STRONG><a name="[a0]"></a>can_rx_thread</STRONG> (Thumb, 260 bytes, Stack size 80 bytes, motor_dj_rm_driver.o(.text.can_rx_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = can_rx_thread &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ms
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_handle
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_dj_rm_driver.o(.text.motor_dj_init)
</UL>
<P><STRONG><a name="[a1]"></a>can_rx_thread1</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, motor_dj_rm_driver.o(.text.can_rx_thread1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = can_rx_thread1 &rArr; rt_thread_delay &rArr; _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_set_speed
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_dj_rm_driver.o(.text.motor_dj_init)
</UL>
<P><STRONG><a name="[95]"></a>can_rx_call</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, motor_dj_rm_driver.o(.text.can_rx_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = can_rx_call &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_dj_rm_driver.o(.text.can_rx_thread)
</UL>
<P><STRONG><a name="[2ee]"></a>afifo_out_data</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, robotmanager.o(.text.afifo_out_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = afifo_out_data &rArr; __afifo_out_data
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__afifo_out_data
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_unlock_irqrestore
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_lock_irqrestore
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rbmg_error_callback
</UL>

<P><STRONG><a name="[7d]"></a>dbus_uart_rx_ind</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, drv_action.o(.text.dbus_uart_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = dbus_uart_rx_ind &rArr; rt_device_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Analyse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_action.o(.text.Action_Init)
</UL>
<P><STRONG><a name="[8]"></a>CalCurveSPTA</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, trajectory_planning.o(.text.CalCurveSPTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CalCurveSPTA &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trajectory_planning.o(.data.pCalCurve)
</UL>
<P><STRONG><a name="[30f]"></a>get_cur_thread_stack_info</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, cm_backtrace.o(.text.get_cur_thread_stack_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = get_cur_thread_stack_info &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[312]"></a>disassembly_ins_is_bl_blx</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, cm_backtrace.o(.text.disassembly_ins_is_bl_blx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = disassembly_ins_is_bl_blx
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
</UL>

<P><STRONG><a name="[30d]"></a>dump_stack</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, cm_backtrace.o(.text.dump_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = dump_stack &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[30e]"></a>get_cur_thread_name</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cm_backtrace.o(.text.get_cur_thread_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_cur_thread_name
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[310]"></a>print_call_stack</STRONG> (Thumb, 226 bytes, Stack size 112 bytes, cm_backtrace.o(.text.print_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584 + Unknown Stack Size
<LI>Call Chain = print_call_stack &rArr; cm_backtrace_call_stack &rArr; get_cur_thread_stack_info &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_assert
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[314]"></a>statck_del_fpu_regs</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, cm_backtrace.o(.text.statck_del_fpu_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = statck_del_fpu_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[315]"></a>fault_diagnosis</STRONG> (Thumb, 1534 bytes, Stack size 16 bytes, cm_backtrace.o(.text.fault_diagnosis))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = fault_diagnosis &rArr; ulog_flush &rArr; ulog_async_output &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[b1]"></a>rt_can_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, can.o(.text.rt_can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_can_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text.rt_hw_can_register)
</UL>
<P><STRONG><a name="[b2]"></a>rt_can_open</STRONG> (Thumb, 772 bytes, Stack size 80 bytes, can.o(.text.rt_can_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = rt_can_open &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text.rt_hw_can_register)
</UL>
<P><STRONG><a name="[b3]"></a>rt_can_close</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, can.o(.text.rt_can_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = rt_can_close &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text.rt_hw_can_register)
</UL>
<P><STRONG><a name="[b4]"></a>rt_can_read</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, can.o(.text.rt_can_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = rt_can_read &rArr; _can_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text.rt_hw_can_register)
</UL>
<P><STRONG><a name="[b5]"></a>rt_can_write</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, can.o(.text.rt_can_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = rt_can_write &rArr; _can_int_tx &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text.rt_hw_can_register)
</UL>
<P><STRONG><a name="[b6]"></a>rt_can_control</STRONG> (Thumb, 986 bytes, Stack size 64 bytes, can.o(.text.rt_can_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = rt_can_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text.rt_hw_can_register)
</UL>
<P><STRONG><a name="[b7]"></a>cantimeout</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, can.o(.text.cantimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = cantimeout &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text.rt_hw_can_register)
</UL>
<P><STRONG><a name="[3c6]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, can.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
</UL>

<P><STRONG><a name="[270]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, can.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
</UL>

<P><STRONG><a name="[26d]"></a>_can_int_rx</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, can.o(.text._can_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = _can_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_read
</UL>

<P><STRONG><a name="[274]"></a>_can_int_tx_priv</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, can.o(.text._can_int_tx_priv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = _can_int_tx_priv &rArr; rt_completion_wait &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_write
</UL>

<P><STRONG><a name="[271]"></a>_can_int_tx</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, can.o(.text._can_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = _can_int_tx &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_write
</UL>

<P><STRONG><a name="[26e]"></a>rt_list_isempty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, can.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
</UL>

<P><STRONG><a name="[26f]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, can.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
</UL>

<P><STRONG><a name="[3e2]"></a>rt_list_len</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, can.o(.text.rt_list_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>

<P><STRONG><a name="[ef]"></a>i2c_bit_xfer</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, i2c-bit-ops.o(.text.i2c_bit_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = i2c_bit_xfer &rArr; i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; i2c_waitack &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c-bit-ops.o(.rodata.i2c_bit_bus_ops)
</UL>
<P><STRONG><a name="[369]"></a>i2c_restart</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, i2c-bit-ops.o(.text.i2c_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_restart &rArr; SCL_H &rArr; rt_tick_get &rArr; rt_hw_atomic_load
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[36a]"></a>i2c_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, i2c-bit-ops.o(.text.i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_start &rArr; i2c_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[366]"></a>i2c_bit_send_address</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, i2c-bit-ops.o(.text.i2c_bit_send_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; i2c_waitack &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[36b]"></a>i2c_recv_bytes</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, i2c-bit-ops.o(.text.i2c_recv_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = i2c_recv_bytes &rArr; i2c_send_ack_or_nack &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[36c]"></a>i2c_send_bytes</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, i2c-bit-ops.o(.text.i2c_send_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = i2c_send_bytes &rArr; i2c_writeb &rArr; i2c_waitack &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[36d]"></a>i2c_stop</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, i2c-bit-ops.o(.text.i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_stop &rArr; SCL_H &rArr; rt_tick_get &rArr; rt_hw_atomic_load
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[235]"></a>SCL_H</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, i2c-bit-ops.o(.text.SCL_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCL_H &rArr; rt_tick_get &rArr; rt_hw_atomic_load
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
</UL>

<P><STRONG><a name="[237]"></a>i2c_delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2c-bit-ops.o(.text.i2c_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
</UL>

<P><STRONG><a name="[367]"></a>i2c_send_address</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, i2c-bit-ops.o(.text.i2c_send_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = i2c_send_address &rArr; i2c_writeb &rArr; i2c_waitack &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[368]"></a>i2c_writeb</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, i2c-bit-ops.o(.text.i2c_writeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = i2c_writeb &rArr; i2c_waitack &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[371]"></a>i2c_readb</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, i2c-bit-ops.o(.text.i2c_readb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = i2c_readb &rArr; SCL_H &rArr; rt_tick_get &rArr; rt_hw_atomic_load
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[373]"></a>i2c_send_ack_or_nack</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, i2c-bit-ops.o(.text.i2c_send_ack_or_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = i2c_send_ack_or_nack &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[372]"></a>i2c_delay2</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c-bit-ops.o(.text.i2c_delay2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_delay2
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
</UL>

<P><STRONG><a name="[374]"></a>i2c_waitack</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, i2c-bit-ops.o(.text.i2c_waitack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = i2c_waitack &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
</UL>

<P><STRONG><a name="[bc]"></a>i2c_bus_device_read</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, i2c_dev.o(.text.i2c_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = i2c_bus_device_read &rArr; rt_i2c_master_recv &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.text.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[bd]"></a>i2c_bus_device_write</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, i2c_dev.o(.text.i2c_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = i2c_bus_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.text.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[be]"></a>i2c_bus_device_control</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, i2c_dev.o(.text.i2c_bus_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = i2c_bus_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_control
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(.text.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[3cb]"></a>rt_spin_lock_irqsave</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, completion.o(.text.rt_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_lock_irqsave
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[3cc]"></a>rt_spin_unlock_irqrestore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, completion.o(.text.rt_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[408]"></a>rt_slist_init</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ringblk_buf.o(.text.rt_slist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_init
</UL>

<P><STRONG><a name="[402]"></a>rt_slist_insert</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ringblk_buf.o(.text.rt_slist_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_slist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_free
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_init
</UL>

<P><STRONG><a name="[409]"></a>rt_spin_lock_init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, ringblk_buf.o(.text.rt_spin_lock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_spin_lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_init
</UL>

<P><STRONG><a name="[3fd]"></a>rt_spin_lock_irqsave</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ringblk_buf.o(.text.rt_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_lock_irqsave
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_free
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_get
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_alloc
</UL>

<P><STRONG><a name="[33b]"></a>find_empty_blk_in_set</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ringblk_buf.o(.text.find_empty_blk_in_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = find_empty_blk_in_set &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_remove
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_alloc
</UL>

<P><STRONG><a name="[33c]"></a>rt_slist_isempty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, ringblk_buf.o(.text.rt_slist_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_get
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_alloc
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_empty_blk_in_set
</UL>

<P><STRONG><a name="[3fe]"></a>list_append</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ringblk_buf.o(.text.list_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = list_append
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_alloc
</UL>

<P><STRONG><a name="[3ff]"></a>rt_spin_unlock_irqrestore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ringblk_buf.o(.text.rt_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_free
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_get
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_alloc
</UL>

<P><STRONG><a name="[33d]"></a>rt_slist_remove</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ringblk_buf.o(.text.rt_slist_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_slist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_empty_blk_in_set
</UL>

<P><STRONG><a name="[404]"></a>rt_slist_first</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ringblk_buf.o(.text.rt_slist_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_first
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_get
</UL>

<P><STRONG><a name="[405]"></a>rt_slist_next</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ringblk_buf.o(.text.rt_slist_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_get
</UL>

<P><STRONG><a name="[401]"></a>list_remove</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ringblk_buf.o(.text.list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_free
</UL>

<P><STRONG><a name="[40c]"></a>rt_ringbuffer_status</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ringbuffer.o(.text.rt_ringbuffer_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[af]"></a>_adc_read</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, adc.o(.text._adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _adc_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.text.rt_hw_adc_register)
</UL>
<P><STRONG><a name="[b0]"></a>_adc_control</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, adc.o(.text._adc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _adc_control
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_voltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.text.rt_hw_adc_register)
</UL>
<P><STRONG><a name="[11e]"></a>adc</STRONG> (Thumb, 826 bytes, Stack size 88 bytes, adc.o(.text.adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = adc &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_voltage
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_disable
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_enable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_read
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(FSymTab)
</UL>
<P><STRONG><a name="[ac]"></a>_pwm_read</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, rt_drv_pwm.o(.text._pwm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _pwm_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(.text.rt_device_pwm_register)
</UL>
<P><STRONG><a name="[ad]"></a>_pwm_write</STRONG> (Thumb, 148 bytes, Stack size 72 bytes, rt_drv_pwm.o(.text._pwm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _pwm_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(.text.rt_device_pwm_register)
</UL>
<P><STRONG><a name="[ae]"></a>_pwm_control</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, rt_drv_pwm.o(.text._pwm_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _pwm_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(.text.rt_device_pwm_register)
</UL>
<P><STRONG><a name="[a9]"></a>_pin_read</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, pin.o(.text._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = _pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text.rt_device_pin_register)
</UL>
<P><STRONG><a name="[aa]"></a>_pin_write</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, pin.o(.text._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = _pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text.rt_device_pin_register)
</UL>
<P><STRONG><a name="[ab]"></a>_pin_control</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, pin.o(.text._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = _pin_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(.text.rt_device_pin_register)
</UL>
<P><STRONG><a name="[120]"></a>_pin_cmd</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, pin.o(.text._pin_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = _pin_cmd &rArr; _pin_cmd_write &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[290]"></a>_pin_cmd_print_usage</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, pin.o(.text._pin_cmd_print_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = _pin_cmd_print_usage &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[291]"></a>_pin_cmd_get</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, pin.o(.text._pin_cmd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = _pin_cmd_get &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[292]"></a>_pin_cmd_mode</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, pin.o(.text._pin_cmd_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = _pin_cmd_mode &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[293]"></a>_pin_cmd_read</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, pin.o(.text._pin_cmd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = _pin_cmd_read &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[294]"></a>_pin_cmd_write</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, pin.o(.text._pin_cmd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = _pin_cmd_write &rArr; _pin_cmd_print_usage &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_isint
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_conv
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_print_usage
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd
</UL>

<P><STRONG><a name="[295]"></a>_pin_cmd_conv</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pin.o(.text._pin_cmd_conv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = _pin_cmd_conv &rArr; rt_pin_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_read
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_mode
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_cmd_get
</UL>

<P><STRONG><a name="[b8]"></a>rt_serial_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, serial_v2.o(.text.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_v2.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[b9]"></a>rt_serial_open</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, serial_v2.o(.text.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = rt_serial_open &rArr; rt_serial_tx_enable &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_tx_enable
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_rx_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_v2.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[ba]"></a>rt_serial_close</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, serial_v2.o(.text.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = rt_serial_close &rArr; rt_serial_tx_disable &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_tx_disable
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_rx_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_v2.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[bb]"></a>rt_serial_control</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, serial_v2.o(.text.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_v2.o(.text.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[41e]"></a>rt_serial_rx_enable</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, serial_v2.o(.text.rt_serial_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = rt_serial_rx_enable &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[41f]"></a>rt_serial_tx_enable</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, serial_v2.o(.text.rt_serial_tx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = rt_serial_tx_enable &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[41c]"></a>rt_serial_rx_disable</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, serial_v2.o(.text.rt_serial_rx_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = rt_serial_rx_disable &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
</UL>

<P><STRONG><a name="[41d]"></a>rt_serial_tx_disable</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, serial_v2.o(.text.rt_serial_tx_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = rt_serial_tx_disable &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
</UL>

<P><STRONG><a name="[3e6]"></a>rt_serial_update_write_index</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, serial_v2.o(.text.rt_serial_update_write_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = rt_serial_update_write_index &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[3e7]"></a>rt_serial_update_read_index</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, serial_v2.o(.text.rt_serial_update_read_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_serial_update_read_index &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[2b1]"></a>rt_serial_get_linear_buffer</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, serial_v2.o(.text.rt_serial_get_linear_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = rt_serial_get_linear_buffer &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_tx_nonblocking
</UL>

<P><STRONG><a name="[c0]"></a>_serial_fifo_rx</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, serial_v2.o(.text._serial_fifo_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = _serial_fifo_rx &rArr; rt_completion_wait &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_v2.o(.text.rt_serial_rx_enable)
</UL>
<P><STRONG><a name="[c2]"></a>_serial_fifo_tx_blocking_buf</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, serial_v2.o(.text._serial_fifo_tx_blocking_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = _serial_fifo_tx_blocking_buf &rArr; rt_completion_wait &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_v2.o(.text.rt_serial_tx_enable)
</UL>
<P><STRONG><a name="[c3]"></a>_serial_fifo_tx_blocking_nbuf</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, serial_v2.o(.text._serial_fifo_tx_blocking_nbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = _serial_fifo_tx_blocking_nbuf &rArr; rt_completion_wait &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_v2.o(.text.rt_serial_tx_enable)
</UL>
<P><STRONG><a name="[c4]"></a>_serial_fifo_tx_nonblocking</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, serial_v2.o(.text._serial_fifo_tx_nonblocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = _serial_fifo_tx_nonblocking &rArr; rt_serial_get_linear_buffer &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_get_linear_buffer
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_v2.o(.text.rt_serial_tx_enable)
</UL>
<P><STRONG><a name="[102]"></a>stm32_adc_init</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, drv_adc.o(.text.stm32_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = stm32_adc_init &rArr; rt_hw_adc_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_register
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[fa]"></a>stm32_adc_enabled</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, drv_adc.o(.text.stm32_adc_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = stm32_adc_enabled &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_get_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.rodata.stm_adc_ops)
</UL>
<P><STRONG><a name="[43e]"></a>stm32_adc_get_channel</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, drv_adc.o(.text.stm32_adc_get_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm32_adc_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_adc_enabled
</UL>

<P><STRONG><a name="[fb]"></a>stm32_adc_get_value</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, drv_adc.o(.text.stm32_adc_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = stm32_adc_get_value &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.rodata.stm_adc_ops)
</UL>
<P><STRONG><a name="[fc]"></a>stm32_adc_get_resolution</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, drv_adc.o(.text.stm32_adc_get_resolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = stm32_adc_get_resolution &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.rodata.stm_adc_ops)
</UL>
<P><STRONG><a name="[fd]"></a>stm32_adc_get_vref</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, drv_adc.o(.text.stm32_adc_get_vref))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = stm32_adc_get_vref &rArr; rt_adc_disable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_disable
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_enable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.rodata.stm_adc_ops)
</UL>
<P><STRONG><a name="[1bb]"></a>_can_tx_isr</STRONG> (Thumb, 886 bytes, Stack size 16 bytes, drv_can.o(.text._can_tx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = _can_tx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>_can_rx_isr</STRONG> (Thumb, 738 bytes, Stack size 24 bytes, drv_can.o(.text._can_rx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = _can_rx_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxFifoFillLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>_can_sce_isr</STRONG> (Thumb, 1430 bytes, Stack size 24 bytes, drv_can.o(.text._can_sce_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = _can_sce_isr &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SCE_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>_can_config</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, drv_can.o(.text._can_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = _can_config &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_can_baud_index
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.rodata._can_ops)
</UL>
<P><STRONG><a name="[269]"></a>get_can_baud_index</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, drv_can.o(.text.get_can_baud_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_can_baud_index
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_config
</UL>

<P><STRONG><a name="[e5]"></a>_can_control</STRONG> (Thumb, 1934 bytes, Stack size 120 bytes, drv_can.o(.text._can_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = _can_control &rArr; _can_config &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_config
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.rodata._can_ops)
</UL>
<P><STRONG><a name="[26b]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, drv_can.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_control
</UL>

<P><STRONG><a name="[e6]"></a>_can_sendmsg</STRONG> (Thumb, 614 bytes, Stack size 64 bytes, drv_can.o(.text._can_sendmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = _can_sendmsg &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.rodata._can_ops)
</UL>
<P><STRONG><a name="[e7]"></a>_can_recvmsg</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, drv_can.o(.text._can_recvmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = _can_recvmsg &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.rodata._can_ops)
</UL>
<P><STRONG><a name="[1e6]"></a>bit2bitno</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, drv_gpio.o(.text.bit2bitno))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_irq_map
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
</UL>

<P><STRONG><a name="[1e7]"></a>pin_irq_hdr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_gpio.o(.text.pin_irq_hdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_irq_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[e8]"></a>stm32_pin_mode</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, drv_gpio.o(.text.stm32_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = stm32_pin_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata._stm32_pin_ops)
</UL>
<P><STRONG><a name="[e9]"></a>stm32_pin_write</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, drv_gpio.o(.text.stm32_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_pin_write &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata._stm32_pin_ops)
</UL>
<P><STRONG><a name="[ea]"></a>stm32_pin_read</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, drv_gpio.o(.text.stm32_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stm32_pin_read &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata._stm32_pin_ops)
</UL>
<P><STRONG><a name="[eb]"></a>stm32_pin_attach_irq</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, drv_gpio.o(.text.stm32_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = stm32_pin_attach_irq &rArr; bit2bitno
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata._stm32_pin_ops)
</UL>
<P><STRONG><a name="[ec]"></a>stm32_pin_dettach_irq</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, drv_gpio.o(.text.stm32_pin_dettach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = stm32_pin_dettach_irq &rArr; bit2bitno
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata._stm32_pin_ops)
</UL>
<P><STRONG><a name="[ed]"></a>stm32_pin_irq_enable</STRONG> (Thumb, 560 bytes, Stack size 64 bytes, drv_gpio.o(.text.stm32_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = stm32_pin_irq_enable &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin_irq_map
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata._stm32_pin_ops)
</UL>
<P><STRONG><a name="[360]"></a>get_pin_irq_map</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv_gpio.o(.text.get_pin_irq_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_pin_irq_map &rArr; bit2bitno
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[ee]"></a>stm32_pin_get</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, drv_gpio.o(.text.stm32_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = stm32_pin_get &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rodata._stm32_pin_ops)
</UL>
<P><STRONG><a name="[10b]"></a>stm32_pwm_init</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, drv_pwm.o(.text.stm32_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = stm32_pwm_init &rArr; rt_device_pwm_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_get_channel
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_pwm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[44b]"></a>stm32_pwm_get_channel</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, drv_pwm.o(.text.stm32_pwm_get_channel))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_init
</UL>

<P><STRONG><a name="[446]"></a>stm32_hw_pwm_init</STRONG> (Thumb, 792 bytes, Stack size 80 bytes, drv_pwm.o(.text.stm32_hw_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = stm32_hw_pwm_init &rArr; stm32_tim_enable_clock &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_enable_clock
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pwm_init
</UL>

<P><STRONG><a name="[5]"></a>drv_pwm_control</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, drv_pwm.o(.text.drv_pwm_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = drv_pwm_control &rArr; drv_pwm_get &rArr; tim_clock_get &rArr; stm32_tim_pclkx_doubler_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set_pulse
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set_period
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.data.drv_ops)
</UL>
<P><STRONG><a name="[334]"></a>drv_pwm_enable</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, drv_pwm.o(.text.drv_pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = drv_pwm_enable &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[335]"></a>drv_pwm_set</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, drv_pwm.o(.text.drv_pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = drv_pwm_set &rArr; tim_clock_get &rArr; stm32_tim_pclkx_doubler_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_clock_get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[336]"></a>drv_pwm_set_period</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, drv_pwm.o(.text.drv_pwm_set_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = drv_pwm_set_period &rArr; tim_clock_get &rArr; stm32_tim_pclkx_doubler_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_clock_get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[337]"></a>drv_pwm_set_pulse</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, drv_pwm.o(.text.drv_pwm_set_pulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = drv_pwm_set_pulse &rArr; tim_clock_get &rArr; stm32_tim_pclkx_doubler_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_clock_get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[338]"></a>drv_pwm_get</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, drv_pwm.o(.text.drv_pwm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = drv_pwm_get &rArr; tim_clock_get &rArr; stm32_tim_pclkx_doubler_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim_clock_get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[339]"></a>tim_clock_get</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, drv_pwm.o(.text.tim_clock_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = tim_clock_get &rArr; stm32_tim_pclkx_doubler_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_tim_pclkx_doubler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set_pulse
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set_period
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[3e3]"></a>stm32_i2c_gpio_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv_soft_i2c.o(.text.stm32_i2c_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = stm32_i2c_gpio_init &rArr; rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[3e5]"></a>stm32_i2c_bus_unlock</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, drv_soft_i2c.o(.text.stm32_i2c_bus_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = stm32_i2c_bus_unlock &rArr; rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[f0]"></a>stm32_set_sda</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, drv_soft_i2c.o(.text.stm32_set_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = stm32_set_sda &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.rodata.stm32_bit_ops_default)
</UL>
<P><STRONG><a name="[f1]"></a>stm32_set_scl</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, drv_soft_i2c.o(.text.stm32_set_scl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = stm32_set_scl &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.rodata.stm32_bit_ops_default)
</UL>
<P><STRONG><a name="[f2]"></a>stm32_get_sda</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drv_soft_i2c.o(.text.stm32_get_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = stm32_get_sda &rArr; rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.rodata.stm32_bit_ops_default)
</UL>
<P><STRONG><a name="[f3]"></a>stm32_get_scl</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drv_soft_i2c.o(.text.stm32_get_scl))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = stm32_get_scl &rArr; rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.rodata.stm32_bit_ops_default)
</UL>
<P><STRONG><a name="[23c]"></a>uart_isr</STRONG> (Thumb, 842 bytes, Stack size 64 bytes, drv_usart_v2.o(.text.uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_get_mask
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_recv_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[228]"></a>dma_recv_isr</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, drv_usart_v2.o(.text.dma_recv_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[3ea]"></a>stm32_uart_get_config</STRONG> (Thumb, 348 bytes, Stack size 20 bytes, drv_usart_v2.o(.text.stm32_uart_get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stm32_uart_get_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[f5]"></a>stm32_configure</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, drv_usart_v2.o(.text.stm32_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = stm32_configure &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart_v2.o(.rodata.stm32_uart_ops)
</UL>
<P><STRONG><a name="[f6]"></a>stm32_control</STRONG> (Thumb, 666 bytes, Stack size 40 bytes, drv_usart_v2.o(.text.stm32_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + In Cycle
<LI>Call Chain = stm32_control &rArr;  stm32_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_transmit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart_v2.o(.rodata.stm32_uart_ops)
</UL>
<P><STRONG><a name="[443]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, drv_usart_v2.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[444]"></a>stm32_dma_config</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, drv_usart_v2.o(.text.stm32_dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = stm32_dma_config &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[f7]"></a>stm32_putc</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, drv_usart_v2.o(.text.stm32_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = stm32_putc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart_v2.o(.rodata.stm32_uart_ops)
</UL>
<P><STRONG><a name="[f8]"></a>stm32_getc</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, drv_usart_v2.o(.text.stm32_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = stm32_getc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_get_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart_v2.o(.rodata.stm32_uart_ops)
</UL>
<P><STRONG><a name="[f9]"></a>stm32_transmit</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, drv_usart_v2.o(.text.stm32_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = stm32_transmit &rArr; stm32_control &rArr;  stm32_control (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart_v2.o(.rodata.stm32_uart_ops)
</UL>
<P><STRONG><a name="[121]"></a>reboot</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drv_common.o(.text.reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_common.o(FSymTab)
</UL>
<P><STRONG><a name="[3e9]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, drv_common.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[9c]"></a>finsh_rx_ind</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, shell.o(.text.finsh_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = finsh_rx_ind &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.finsh_set_device)
</UL>
<P><STRONG><a name="[345]"></a>finsh_system_function_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, shell.o(.text.finsh_system_function_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_system_function_init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[9d]"></a>finsh_thread_entry</STRONG> (Thumb, 1520 bytes, Stack size 72 bytes, shell.o(.text.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584 + Unknown Stack Size
<LI>Call Chain = finsh_thread_entry &rArr; msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text.finsh_system_init)
</UL>
<P><STRONG><a name="[347]"></a>shell_handle_history</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, shell.o(.text.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[348]"></a>shell_auto_complete</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, shell.o(.text.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = shell_auto_complete &rArr; msh_opt_auto_complete &rArr; msh_opt_complete &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[34a]"></a>shell_push_history</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, shell.o(.text.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = shell_push_history &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[122]"></a>msh_help</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, msh.o(.text.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[123]"></a>cmd_ps</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, msh.o(.text.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[124]"></a>cmd_free</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, msh.o(.text.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = cmd_free &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[283]"></a>_msh_exec_cmd</STRONG> (Thumb, 248 bytes, Stack size 88 bytes, msh.o(.text._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[284]"></a>msh_get_cmd</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, msh.o(.text.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[285]"></a>msh_split</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, msh.o(.text.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[3a5]"></a>str_common</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, msh.o(.text.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_complete
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[3a9]"></a>msh_get_argc</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, msh.o(.text.msh_get_argc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msh_get_argc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[3a6]"></a>msh_get_cmd_opt</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, msh.o(.text.msh_get_cmd_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = msh_get_cmd_opt &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[3aa]"></a>msh_opt_help</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, msh.o(.text.msh_opt_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = msh_opt_help &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[3ab]"></a>msh_opt_complete</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, msh.o(.text.msh_opt_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = msh_opt_complete &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_auto_complete
</UL>

<P><STRONG><a name="[125]"></a>clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmd.o(.text.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = clear &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[126]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[37e]"></a>list_find_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, cmd.o(.text.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = list_find_init &rArr; rt_object_get_information
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[37f]"></a>object_split</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cmd.o(.text.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[380]"></a>list_get_next</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, cmd.o(.text.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = list_get_next &rArr; rt_spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[381]"></a>rt_spin_lock_irqsave</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmd.o(.text.rt_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_lock_irqsave
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
</UL>

<P><STRONG><a name="[382]"></a>rt_spin_unlock_irqrestore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmd.o(.text.rt_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
</UL>

<P><STRONG><a name="[383]"></a>rt_list_isempty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, cmd.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[384]"></a>rt_list_len</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, cmd.o(.text.rt_list_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[127]"></a>cmd_list</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, cmd.o(.text.cmd_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = cmd_list &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_opt_list_dump
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_cmd_opt_id_get
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[fe]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[ff]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[106]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[117]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[a6]"></a>main_thread_entry</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, components.o(.text.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_mdelay &rArr; _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(.text.rt_application_init)
</UL>
<P><STRONG><a name="[422]"></a>rt_spin_lock_irqsave</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, idle.o(.text.rt_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_lock_irqsave
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
</UL>

<P><STRONG><a name="[423]"></a>rt_spin_unlock_irqrestore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, idle.o(.text.rt_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
</UL>

<P><STRONG><a name="[431]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, idle.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
</UL>

<P><STRONG><a name="[430]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, idle.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
</UL>

<P><STRONG><a name="[c7]"></a>idle_thread_entry</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, idle.o(.text.idle_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = idle_thread_entry &rArr; rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[375]"></a>rt_defunct_execute</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, idle.o(.text.rt_defunct_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_thread_entry
</UL>

<P><STRONG><a name="[28f]"></a>rt_list_isempty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ipc.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_dequeue
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_update_priority
</UL>

<P><STRONG><a name="[2a5]"></a>rt_spin_lock_irqsave</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text.rt_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_lock_irqsave
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[2a6]"></a>rt_spin_unlock_irqrestore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text.rt_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_sem_take
</UL>

<P><STRONG><a name="[425]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ipc.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
</UL>

<P><STRONG><a name="[2ac]"></a>_sem_object_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ipc.o(.text._sem_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _sem_object_init &rArr; _ipc_object_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[27f]"></a>_ipc_object_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(.text._ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ipc_object_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_object_init
</UL>

<P><STRONG><a name="[2ad]"></a>rt_spin_lock_init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, ipc.o(.text.rt_spin_lock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_spin_lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sem_object_init
</UL>

<P><STRONG><a name="[2a4]"></a>_rt_sem_take</STRONG> (Thumb, 586 bytes, Stack size 64 bytes, ipc.o(.text._rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = _rt_sem_take &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[280]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ipc.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>

<P><STRONG><a name="[286]"></a>_mutex_before_delete_detach</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ipc.o(.text._mutex_before_delete_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _mutex_before_delete_detach &rArr; rt_spin_unlock &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_reaet_time_thread_usage &rArr; rt_thread_usage_get_now_time &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_resume_all
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
</UL>

<P><STRONG><a name="[287]"></a>rt_spin_lock</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ipc.o(.text.rt_spin_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_spin_lock &rArr; rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>

<P><STRONG><a name="[289]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ipc.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>

<P><STRONG><a name="[278]"></a>_check_and_update_prio</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ipc.o(.text._check_and_update_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _check_and_update_prio &rArr; rt_sched_thread_change_priority &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>

<P><STRONG><a name="[28d]"></a>rt_spin_unlock</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ipc.o(.text.rt_spin_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = rt_spin_unlock &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_reaet_time_thread_usage &rArr; rt_thread_usage_get_now_time &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_before_delete_detach
</UL>

<P><STRONG><a name="[27a]"></a>_thread_get_mutex_priority</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ipc.o(.text._thread_get_mutex_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _thread_get_mutex_priority &rArr; rt_sched_thread_get_init_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_init_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_and_update_prio
</UL>

<P><STRONG><a name="[29e]"></a>_thread_update_priority</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, ipc.o(.text._thread_update_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _thread_update_priority &rArr; rt_susp_list_enqueue &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_change_priority
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_susp_list_enqueue
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_update_priority
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[28e]"></a>_mutex_update_priority</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ipc.o(.text._mutex_update_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _mutex_update_priority &rArr; rt_sched_thread_get_curr_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
</UL>

<P><STRONG><a name="[299]"></a>_rt_mutex_take</STRONG> (Thumb, 1050 bytes, Stack size 88 bytes, ipc.o(.text._rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + In Cycle
<LI>Call Chain = _rt_mutex_take &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_curr_prio
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_update_priority
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_get_mutex_priority
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[29f]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ipc.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_mutex_take
</UL>

<P><STRONG><a name="[27c]"></a>_heap_lock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, kservice.o(.text._heap_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = _heap_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[27e]"></a>_heap_unlock</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, kservice.o(.text._heap_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = _heap_unlock &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[281]"></a>_kputs</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(.text._kputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
</UL>

<P><STRONG><a name="[128]"></a>cmd_backtrace</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, kservice.o(.text.cmd_backtrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = cmd_backtrace &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace_thread
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_backtrace
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kservice.o(FSymTab)
</UL>
<P><STRONG><a name="[2a7]"></a>_rt_system_heap_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, kservice.o(.text._rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = _rt_system_heap_init &rArr; rt_smem_init &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[27d]"></a>_heap_lock_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kservice.o(.text._heap_lock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = _heap_lock_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_system_heap_init
</UL>

<P><STRONG><a name="[3f5]"></a>_smem_info</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, kservice.o(.text._smem_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _smem_info
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[3b1]"></a>plug_holes</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, mem.o(.text.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
</UL>

<P><STRONG><a name="[3f8]"></a>rt_spin_lock_irqsave</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, object.o(.text.rt_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_lock_irqsave
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[3fa]"></a>rt_spin_unlock_irqrestore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, object.o(.text.rt_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[3f9]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, object.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[3fb]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, object.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[415]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, scheduler_comm.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_ready
</UL>

<P><STRONG><a name="[418]"></a>rt_thread_uasge_get_interval_time</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scheduler_up.o(.text.rt_thread_uasge_get_interval_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_thread_uasge_get_interval_time &rArr; rt_thread_usage_get_now_time &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_usage_get_now_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2a9]"></a>_scheduler_get_highest_priority_thread</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, scheduler_up.o(.text._scheduler_get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _scheduler_get_highest_priority_thread &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[2ab]"></a>_scheduler_stack_check</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, scheduler_up.o(.text._scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = _scheduler_stack_check &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[40a]"></a>rt_reaet_time_thread_usage</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, scheduler_up.o(.text.rt_reaet_time_thread_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_reaet_time_thread_usage &rArr; rt_thread_usage_get_now_time &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_usage_get_now_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[413]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, scheduler_up.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_priv
</UL>

<P><STRONG><a name="[410]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, scheduler_up.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
</UL>

<P><STRONG><a name="[411]"></a>rt_list_isempty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, scheduler_up.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
</UL>

<P><STRONG><a name="[40e]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, scheduler_up.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
</UL>

<P><STRONG><a name="[40f]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, scheduler_up.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
</UL>

<P><STRONG><a name="[2c8]"></a>_thread_init</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, thread.o(.text._thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_init_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[8d]"></a>_thread_exit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, thread.o(.text._thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = _thread_exit &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._thread_init)
</UL>
<P><STRONG><a name="[2cb]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, thread.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[8e]"></a>_thread_timeout</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, thread.o(.text._thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = _thread_timeout &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_is_suspended
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock_n_resched
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._thread_init)
</UL>
<P><STRONG><a name="[2cd]"></a>rt_spin_lock_init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, thread.o(.text.rt_spin_lock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_spin_lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[2bb]"></a>_thread_detach</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, thread.o(.text._thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = _thread_detach &rArr; _thread_detach_from_mutex &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_unlock
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_lock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_remove_thread
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_close
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sched_thread_get_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[2c1]"></a>_thread_detach_from_mutex</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, thread.o(.text._thread_detach_from_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = _thread_detach_from_mutex &rArr; rt_mutex_drop_thread &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_drop_thread
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach
</UL>

<P><STRONG><a name="[2cf]"></a>_thread_sleep</STRONG> (Thumb, 422 bytes, Stack size 56 bytes, thread.o(.text._thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = _thread_sleep &rArr; rt_exit_critical_safe &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_with_flag
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[2ce]"></a>_thread_set_suspend_state</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, thread.o(.text._thread_set_suspend_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = _thread_set_suspend_state &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend_to_list
</UL>

<P><STRONG><a name="[2d2]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, thread.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[2c4]"></a>rt_spin_lock_irqsave</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, thread.o(.text.rt_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_lock_irqsave
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
</UL>

<P><STRONG><a name="[2c6]"></a>rt_spin_unlock_irqrestore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, thread.o(.text.rt_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_detach_from_mutex
</UL>

<P><STRONG><a name="[2d5]"></a>_timer_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, timer.o(.text._timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _timer_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[2b3]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, timer.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_timer_check
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>

<P><STRONG><a name="[436]"></a>_timerlock_idx</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(.text._timerlock_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _timerlock_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
</UL>

<P><STRONG><a name="[2b4]"></a>rt_spin_lock_irqsave</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timer.o(.text.rt_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_lock_irqsave
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_timer_check
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[2b6]"></a>_timer_remove</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(.text._timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_timer_check
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
</UL>

<P><STRONG><a name="[2b8]"></a>rt_spin_unlock_irqrestore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timer.o(.text.rt_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_timer_check
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[2b9]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, timer.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_timer_check
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>

<P><STRONG><a name="[2ba]"></a>_timer_start</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, timer.o(.text._timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _timer_start &rArr; _timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_timer_check
</UL>

<P><STRONG><a name="[2b7]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_timer_check
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
</UL>

<P><STRONG><a name="[2b5]"></a>rt_list_isempty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, timer.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_timer_check
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
</UL>

<P><STRONG><a name="[2d6]"></a>_timer_list_next_timeout</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, timer.o(.text._timer_list_next_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _timer_list_next_timeout &rArr; rt_list_isempty
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[42a]"></a>rt_spin_lock_init</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, timer.o(.text.rt_spin_lock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_spin_lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
</UL>

<P><STRONG><a name="[c5]"></a>_timer_thread_entry</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, timer.o(.text._timer_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = _timer_thread_entry &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_timer_check
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text.rt_system_timer_thread_init)
</UL>
<P><STRONG><a name="[c6]"></a>timeout</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, timer.o(.text.timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text.rt_system_timer_thread_init)
</UL>
<P><STRONG><a name="[2b2]"></a>_soft_timer_check</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, timer.o(.text._soft_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _soft_timer_check &rArr; _timer_start &rArr; _timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[363]"></a>hard_fault_track</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, cpuport.o(.text.hard_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = hard_fault_track &rArr; usage_fault_track &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[2ff]"></a>bus_fault_track</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, cpuport.o(.text.bus_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[364]"></a>mem_manage_fault_track</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, cpuport.o(.text.mem_manage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[365]"></a>usage_fault_track</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, cpuport.o(.text.usage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[1d7]"></a>ADC_Init</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[223]"></a>UART_SetConfig</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[81]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[82]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DMATxHalfCplt &rArr; HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[83]"></a>UART_DMAError</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = UART_DMAError &rArr; HAL_UART_ErrorCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
<LI> stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[23d]"></a>UART_EndTxTransfer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_EndTxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[21c]"></a>UART_EndRxTransfer</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[85]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UART_RxCpltCallback &rArr; dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[86]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UART_RxHalfCpltCallback &rArr; dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[21b]"></a>UART_Receive_IT</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_recv_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[21f]"></a>UART_Transmit_IT</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, stm32f4xx_hal_uart.o(.text.UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[220]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_thread_resume &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[201]"></a>TIM_CCxNChannelCmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(.text.TIM_CCxNChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Stop
</UL>

<P><STRONG><a name="[20d]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[20f]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 242 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[210]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[208]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[209]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(.text.TIM_ITRx_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[20a]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(.text.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1e2]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[1e0]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[1e4]"></a>DMA_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1f6]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[1f3]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1f4]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f4xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1f5]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[1f1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[1ef]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[1ff]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[107]"></a>_perf_counter_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, perf_os_patch_rt_thread.o(.text._perf_counter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = _perf_counter_init &rArr; ulog_output &rArr; ulog_voutput &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> perf_os_patch_rt_thread.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[362]"></a>check_systick</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, perf_counter.o(.text.check_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = check_systick
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ms
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>

<P><STRONG><a name="[37b]"></a>SysTick_Config</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, perf_counter.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[2fd]"></a>buffer_gadget</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, rt_vsnprintf.o(.text.buffer_gadget))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = buffer_gadget
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discarding_gadget
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[438]"></a>vsnprintf_impl</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, rt_vsnprintf.o(.text.vsnprintf_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = vsnprintf_impl &rArr; format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; update_normalization &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_termination_with_gadget
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[2fe]"></a>discarding_gadget</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_vsnprintf.o(.text.discarding_gadget))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_gadget
</UL>

<P><STRONG><a name="[34f]"></a>format_string_loop</STRONG> (Thumb, 2500 bytes, Stack size 200 bytes, rt_vsnprintf.o(.text.format_string_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = format_string_loop &rArr; print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; update_normalization &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen_s_
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atou_
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_digit_
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_flags
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar_via_gadget
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf_impl
</UL>

<P><STRONG><a name="[45a]"></a>append_termination_with_gadget</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, rt_vsnprintf.o(.text.append_termination_with_gadget))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = append_termination_with_gadget
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf_impl
</UL>

<P><STRONG><a name="[350]"></a>putchar_via_gadget</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rt_vsnprintf.o(.text.putchar_via_gadget))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = putchar_via_gadget
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[351]"></a>parse_flags</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, rt_vsnprintf.o(.text.parse_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = parse_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[2f7]"></a>is_digit_</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_vsnprintf.o(.text.is_digit_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_digit_
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atou_
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[2f6]"></a>atou_</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_vsnprintf.o(.text.atou_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atou_ &rArr; is_digit_
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_digit_
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[352]"></a>print_integer</STRONG> (Thumb, 300 bytes, Stack size 104 bytes, rt_vsnprintf.o(.text.print_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = print_integer &rArr; print_integer_finalization &rArr; out_rev_ &rArr; putchar_via_gadget
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer_finalization
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[353]"></a>print_floating_point</STRONG> (Thumb, 440 bytes, Stack size 88 bytes, rt_vsnprintf.o(.text.print_floating_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = print_floating_point &rArr; print_exponential_number &rArr; get_normalized_components &rArr; update_normalization &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_decimal_number
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[354]"></a>out_rev_</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, rt_vsnprintf.o(.text.out_rev_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = out_rev_ &rArr; putchar_via_gadget
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar_via_gadget
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer_finalization
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[355]"></a>strnlen_s_</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rt_vsnprintf.o(.text.strnlen_s_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strnlen_s_
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_string_loop
</UL>

<P><STRONG><a name="[3b6]"></a>print_integer_finalization</STRONG> (Thumb, 622 bytes, Stack size 40 bytes, rt_vsnprintf.o(.text.print_integer_finalization))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = print_integer_finalization &rArr; out_rev_ &rArr; putchar_via_gadget
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
</UL>

<P><STRONG><a name="[3b5]"></a>print_exponential_number</STRONG> (Thumb, 1182 bytes, Stack size 304 bytes, rt_vsnprintf.o(.text.print_exponential_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = print_exponential_number &rArr; get_normalized_components &rArr; update_normalization &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bastardized_floor
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sign_bit
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_integer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar_via_gadget
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[3b4]"></a>print_decimal_number</STRONG> (Thumb, 114 bytes, Stack size 120 bytes, rt_vsnprintf.o(.text.print_decimal_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = print_decimal_number &rArr; print_broken_up_decimal &rArr; out_rev_ &rArr; putchar_via_gadget
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_broken_up_decimal
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_floating_point
</UL>

<P><STRONG><a name="[357]"></a>get_sign_bit</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rt_vsnprintf.o(.text.get_sign_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_access
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[38a]"></a>log10_of_positive</STRONG> (Thumb, 304 bytes, Stack size 80 bytes, rt_vsnprintf.o(.text.log10_of_positive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = log10_of_positive &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_exp2
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_access
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[2f8]"></a>bastardized_floor</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, rt_vsnprintf.o(.text.bastardized_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bastardized_floor &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow10_of_int
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[3b2]"></a>pow10_of_int</STRONG> (Thumb, 496 bytes, Stack size 104 bytes, rt_vsnprintf.o(.text.pow10_of_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pow10_of_int &rArr; bastardized_floor &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bastardized_floor
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[356]"></a>get_components</STRONG> (Thumb, 544 bytes, Stack size 80 bytes, rt_vsnprintf.o(.text.get_components))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_components &rArr; get_sign_bit &rArr; get_bit_access
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sign_bit
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_decimal_number
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[35d]"></a>get_normalized_components</STRONG> (Thumb, 596 bytes, Stack size 200 bytes, rt_vsnprintf.o(.text.get_normalized_components))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = get_normalized_components &rArr; update_normalization &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_components
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_normalization
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unapply_scaling
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_scaling
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[3b3]"></a>print_broken_up_decimal</STRONG> (Thumb, 686 bytes, Stack size 80 bytes, rt_vsnprintf.o(.text.print_broken_up_decimal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = print_broken_up_decimal &rArr; out_rev_ &rArr; putchar_via_gadget
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_rev_
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_decimal_number
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_exponential_number
</UL>

<P><STRONG><a name="[361]"></a>get_bit_access</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_vsnprintf.o(.text.get_bit_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_bit_access
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sign_bit
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_normalization
</UL>

<P><STRONG><a name="[38b]"></a>get_exp2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rt_vsnprintf.o(.text.get_exp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_exp2
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10_of_positive
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_normalization
</UL>

<P><STRONG><a name="[2ef]"></a>apply_scaling</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, rt_vsnprintf.o(.text.apply_scaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = apply_scaling &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
</UL>

<P><STRONG><a name="[35e]"></a>unapply_scaling</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, rt_vsnprintf.o(.text.unapply_scaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = unapply_scaling &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
</UL>

<P><STRONG><a name="[35f]"></a>update_normalization</STRONG> (Thumb, 274 bytes, Stack size 96 bytes, rt_vsnprintf.o(.text.update_normalization))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = update_normalization &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_exp2
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_access
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_normalized_components
</UL>

<P><STRONG><a name="[240]"></a>__cxx_global_var_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ipaddress.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Printable::Printable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_IPAddress.cpp
</UL>

<P><STRONG><a name="[12a]"></a>_GLOBAL__sub_I_IPAddress.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ipaddress.o(.text._GLOBAL__sub_I_IPAddress.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _GLOBAL__sub_I_IPAddress.cpp &rArr; __cxx_global_var_init &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Printable::Printable__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipaddress.o(.init_array)
</UL>
<P><STRONG><a name="[c8]"></a>rtduino_sketch_entry(void*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rtduino.o(.text._ZL20rtduino_sketch_entryPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtduino_sketch_entry(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtduino.o(.text.rtduino_sketch_loader_create_stacksize_prio)
</UL>
<P><STRONG><a name="[112]"></a>rtduino_init()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtduino.o(.text._ZL12rtduino_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = rtduino_init() &rArr; rtduino_sketch_loader_create(char const*, void (*)(), void (*)()) &rArr; rtduino_sketch_loader_create_stacksize_prio &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initVariant
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtduino_sketch_loader_create(char const*, void (*)(), void (*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtduino.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[244]"></a>rtduino_sketch_loader_create(char const*, void (*)(), void (*)())</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rtduino.o(.text._ZL28rtduino_sketch_loader_createPKcPFvvES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = rtduino_sketch_loader_create(char const*, void (*)(), void (*)()) &rArr; rtduino_sketch_loader_create_stacksize_prio &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtduino_sketch_loader_create_stacksize_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtduino_init()
</UL>

<P><STRONG><a name="[23f]"></a>__cxx_global_var_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hardwareserial.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleSerial::ConsoleSerial__sub_object()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_HardwareSerial.cpp
</UL>

<P><STRONG><a name="[12b]"></a>_GLOBAL__sub_I_HardwareSerial.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hardwareserial.o(.text._GLOBAL__sub_I_HardwareSerial.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = _GLOBAL__sub_I_HardwareSerial.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.init_array)
</UL>
<P><STRONG><a name="[241]"></a>__cxx_global_var_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wire.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Wire.cpp
</UL>

<P><STRONG><a name="[12c]"></a>_GLOBAL__sub_I_Wire.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wire.o(.text._GLOBAL__sub_I_Wire.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = _GLOBAL__sub_I_Wire.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; rt_malloc &rArr; rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.init_array)
</UL>
<P><STRONG><a name="[35c]"></a>get_log_buf</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ulog.o(.text.get_log_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_log_buf &rArr; rt_interrupt_get_nest &rArr; rt_hw_atomic_load
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[3ac]"></a>output_lock</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ulog.o(.text.output_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = output_lock &rArr; rt_mutex_take &rArr; _rt_mutex_take &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_lock_irqsave
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_scheduler_is_available
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[3af]"></a>output_unlock</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ulog.o(.text.output_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = output_unlock &rArr; rt_mutex_release &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spin_unlock_irqrestore
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_scheduler_is_available
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[32c]"></a>do_output</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, ulog.o(.text.do_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + In Cycle
<LI>Call Chain = do_output &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_put
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rbb_blk_alloc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_console_backend_output
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_voutput
</UL>

<P><STRONG><a name="[3ad]"></a>rt_scheduler_is_available</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ulog.o(.text.rt_scheduler_is_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_scheduler_is_available &rArr; rt_in_thread_context &rArr; rt_interrupt_get_nest &rArr; rt_hw_atomic_load
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_is_disabled
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_in_thread_context
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
</UL>

<P><STRONG><a name="[3ae]"></a>rt_spin_lock_irqsave</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ulog.o(.text.rt_spin_lock_irqsave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_lock_irqsave
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_lock
</UL>

<P><STRONG><a name="[3b0]"></a>rt_spin_unlock_irqrestore</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ulog.o(.text.rt_spin_unlock_irqrestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_spin_unlock_irqrestore
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_unlock
</UL>

<P><STRONG><a name="[330]"></a>ulog_output_to_all_backend</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, ulog.o(.text.ulog_output_to_all_backend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ulog_output_to_all_backend &rArr; rt_kputs &rArr;  _kputs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kputs
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_first
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_output
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_output
</UL>

<P><STRONG><a name="[44f]"></a>rt_slist_append</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ulog.o(.text.rt_slist_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_slist_append
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_backend_register
</UL>

<P><STRONG><a name="[450]"></a>rt_slist_first</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ulog.o(.text.rt_slist_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_first
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>

<P><STRONG><a name="[451]"></a>rt_slist_next</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ulog.o(.text.rt_slist_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_output_to_all_backend
</UL>

<P><STRONG><a name="[458]"></a>rt_slist_init</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ulog.o(.text.rt_slist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_slist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</UL>

<P><STRONG><a name="[c9]"></a>async_output_thread_entry</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ulog.o(.text.async_output_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = async_output_thread_entry &rArr; ulog_async_waiting_log &rArr; rt_sem_take &rArr; _rt_sem_take &rArr; rt_kprintf &rArr; _kputs &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_flush
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_waiting_log
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_async_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ulog.o(.text.ulog_async_init)
</UL>
<P><STRONG><a name="[3ed]"></a>rt_in_thread_context</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ulog.o(.text.rt_in_thread_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_in_thread_context &rArr; rt_interrupt_get_nest &rArr; rt_hw_atomic_load
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_scheduler_is_available
</UL>

<P><STRONG><a name="[47f]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[471]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[6f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[18a]"></a>_local_sscanf</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[191]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1a0]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
