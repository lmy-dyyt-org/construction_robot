


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ; * Copyright (c) 2006-2020, RT-Thread Development Team
    3 00000000         ; *
    4 00000000         ; * SPDX-License-Identifier: Apache-2.0
    5 00000000         ; *
    6 00000000         ; * Change Logs:
    7 00000000         ; * Date           Author       Notes
    8 00000000         ; * 2020-12-23     Meco Man     porting to RT-Thread
    9 00000000         ; */
   10 00000000         
   11 00000000         ;*******************************************************
                       *************************************************
   12 00000000         ;                    Copyright 2004-2020 Silicon Laborat
                       ories Inc. www.silabs.com
   13 00000000         ;
   14 00000000         ;                                 SPDX-License-Identifie
                       r: APACHE-2.0
   15 00000000         ;
   16 00000000         ;               This software is subject to an open sour
                       ce license and is distributed by
   17 00000000         ;                Silicon Laboratories Inc. pursuant to t
                       he terms of the Apache License,
   18 00000000         ;                    Version 2.0 available at www.apache
                       .org/licenses/LICENSE-2.0.
   19 00000000         ;*******************************************************
                       *************************************************
   20 00000000         
   21 00000000         
   22 00000000         ;*******************************************************
                       *************************************************
   23 00000000         ;                                           PUBLIC FUNCT
                       IONS
   24 00000000         ;*******************************************************
                       *************************************************
   25 00000000         
   26 00000000                 EXPORT           rt_memcpy
   27 00000000         
   28 00000000         
   29 00000000         ;*******************************************************
                       *************************************************
   30 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   31 00000000         ;*******************************************************
                       *************************************************
   32 00000000         
   33 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   34 00000000                 THUMB
   35 00000000                 REQUIRE8
   36 00000000                 PRESERVE8
   37 00000000         
   38 00000000         
   39 00000000         ;*******************************************************
                       *************************************************
   40 00000000         ;                                             rt_memcpy_
                       asm()
   41 00000000         ;
   42 00000000         ; Description : Copy data octets from one buffer to anot
                       her buffer.



ARM Macro Assembler    Page 2 


   43 00000000         ;
   44 00000000         ; Argument(s) : pdest       Pointer to destination memor
                       y buffer.
   45 00000000         ;
   46 00000000         ;               psrc        Pointer to source      memor
                       y buffer.
   47 00000000         ;
   48 00000000         ;               size        Number of data buffer octets
                        to copy.
   49 00000000         ;
   50 00000000         ; Return(s)   : pdest       Pointer to destination memor
                       y buffer.
   51 00000000         ;
   52 00000000         ; Caller(s)   : Application.
   53 00000000         ;
   54 00000000         ; Note(s)     : (1) Null copies allowed (i.e. 0-octet si
                       ze).
   55 00000000         ;
   56 00000000         ;               (2) Memory buffers NOT checked for overl
                       apping.
   57 00000000         ;
   58 00000000         ;               (3) Modulo arithmetic is used to determi
                       ne whether a memory buffer starts on a 'CPU_ALIGN'
   59 00000000         ;                   address boundary.
   60 00000000         ;
   61 00000000         ;               (4) ARM Cortex-M3 processors use a subse
                       t of the ARM Thumb-2 instruction set which does
   62 00000000         ;                   NOT support 16-bit conditional branc
                       h instructions but ONLY supports 8-bit conditional
   63 00000000         ;                   branch instructions.
   64 00000000         ;
   65 00000000         ;                   Therefore, branches exceeding 8-bit,
                        signed, relative offsets :
   66 00000000         ;
   67 00000000         ;                   (a) CANNOT be implemented with     c
                       onditional branches; but ...
   68 00000000         ;                   (b) MUST   be implemented with non-c
                       onditional branches.
   69 00000000         ;*******************************************************
                       *************************************************
   70 00000000         
   71 00000000         ; void  rt_memcpy (void        *pdest,       ;  ==>  R0
   72 00000000         ;                  void        *psrc,        ;  ==>  R1
   73 00000000         ;                  rt_ubase_t   size)        ;  ==>  R2
   74 00000000         
   75 00000000         rt_memcpy
   76 00000000 2800            CMP              R0, #0
   77 00000002 D100            BNE              rt_memcpy_1
   78 00000004 4770            BX               LR          ; return if pdest =
                                                            = NULL
   79 00000006         
   80 00000006         rt_memcpy_1
   81 00000006 2900            CMP              R1, #0
   82 00000008 D100            BNE              rt_memcpy_2
   83 0000000A 4770            BX               LR          ; return if psrc  =
                                                            = NULL
   84 0000000C         
   85 0000000C         rt_memcpy_2
   86 0000000C 2A00            CMP              R2, #0



ARM Macro Assembler    Page 3 


   87 0000000E D100            BNE              rt_memcpy_3
   88 00000010 4770            BX               LR          ; return if size  =
                                                            = 0
   89 00000012         
   90 00000012         rt_memcpy_3
   91 00000012 E92D 1FF8       STMFD            SP!, {R3-R12} ; save registers 
                                                            on stack
   92 00000016 B401            PUSH             {R0}        ; save pdest 
   93 00000018         
   94 00000018         chk_align_32                         ; check if both des
                                                            t & src 32-bit alig
                                                            ned
   95 00000018 F000 0303       AND              R3, R0, #0x03
   96 0000001C F001 0403       AND              R4, R1, #0x03
   97 00000020 42A3            CMP              R3, R4
   98 00000022 D111            BNE              chk_align_16 ; not 32-bit align
                                                            ed, check for 16-bi
                                                            t alignment
   99 00000024         
  100 00000024 F1C3 0304       RSB              R3, R3, #0x04 ; compute 1-2-3 p
                                                            re-copy bytes (to a
                                                            lign to the next 32
                                                            -bit boundary)
  101 00000028 F003 0303       AND              R3, R3, #0x03
  102 0000002C         
  103 0000002C         pre_copy_1
  104 0000002C 2B01            CMP              R3, #1      ; copy 1-2-3 bytes 
                                                            (to align to the ne
                                                            xt 32-bit boundary)
                                                            
  105 0000002E D31D            BCC              copy_32_1   ; start real 32-bit
                                                             copy
  106 00000030 2A01            CMP              R2, #1      ; check if any more
                                                             data to copy
  107 00000032 D200            BCS              pre_copy_1_cont
  108 00000034 E0F2            B                rt_memcpy_end ; no more data to
                                                             copy (see Note #4b
                                                            )
  109 00000036         
  110 00000036         pre_copy_1_cont
  111 00000036 F811 4B01       LDRB             R4, [R1], #1
  112 0000003A F800 4B01       STRB             R4, [R0], #1
  113 0000003E F1A3 0301       SUB              R3, R3, #1
  114 00000042 F1A2 0201       SUB              R2, R2, #1
  115 00000046 E7F1            B                pre_copy_1
  116 00000048         
  117 00000048         
  118 00000048         chk_align_16                         ; check if both des
                                                            t & src 16-bit alig
                                                            ned
  119 00000048 F000 0301       AND              R3, R0, #0x01
  120 0000004C F001 0401       AND              R4, R1, #0x01
  121 00000050 42A3            CMP              R3, R4
  122 00000052 D000            BEQ              pre_copy_2
  123 00000054 E094            B                copy_08_1   ; not 16-bit aligne
                                                            d, start 8-bit copy
                                                             (see Note #4b)
  124 00000056         
  125 00000056         pre_copy_2



ARM Macro Assembler    Page 4 


  126 00000056 2B01            CMP              R3, #1      ; copy 1 byte (to a
                                                            lign to the next 16
                                                            -bit boundary)
  127 00000058 D344            BCC              copy_16_1   ; start real 16-bit
                                                             copy
  128 0000005A         
  129 0000005A F811 4B01       LDRB             R4, [R1], #1
  130 0000005E F800 4B01       STRB             R4, [R0], #1
  131 00000062 F1A3 0301       SUB              R3, R3, #1
  132 00000066 F1A2 0201       SUB              R2, R2, #1
  133 0000006A E7F4            B                pre_copy_2
  134 0000006C         
  135 0000006C         
  136 0000006C         copy_32_1
  137 0000006C F5B2 7FB4       CMP              R2, #(04*10*09) ; Copy 9 chunks
                                                             of 10 32-bit words
                                                             (360 octets per lo
                                                            op)
  138 00000070 D326            BCC              copy_32_2
  139 00000072 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  140 00000076 E8A0 1FF8       STMIA            R0!, {R3-R12}
  141 0000007A E8B1 1FF8       LDMIA            R1!, {R3-R12}
  142 0000007E E8A0 1FF8       STMIA            R0!, {R3-R12}
  143 00000082 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  144 00000086 E8A0 1FF8       STMIA            R0!, {R3-R12}
  145 0000008A E8B1 1FF8       LDMIA            R1!, {R3-R12}
  146 0000008E E8A0 1FF8       STMIA            R0!, {R3-R12}
  147 00000092 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  148 00000096 E8A0 1FF8       STMIA            R0!, {R3-R12}
  149 0000009A E8B1 1FF8       LDMIA            R1!, {R3-R12}
  150 0000009E E8A0 1FF8       STMIA            R0!, {R3-R12}
  151 000000A2 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  152 000000A6 E8A0 1FF8       STMIA            R0!, {R3-R12}
  153 000000AA E8B1 1FF8       LDMIA            R1!, {R3-R12}
  154 000000AE E8A0 1FF8       STMIA            R0!, {R3-R12}
  155 000000B2 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  156 000000B6 E8A0 1FF8       STMIA            R0!, {R3-R12}
  157 000000BA F5A2 72B4       SUB              R2, R2, #(04*10*09)
  158 000000BE E7D5            B                copy_32_1
  159 000000C0         
  160 000000C0         copy_32_2
  161 000000C0 2A28            CMP              R2, #(04*10*01) ; Copy chunks o
                                                            f 10 32-bit words (
                                                            40 octets per loop)
                                                            
  162 000000C2 D306            BCC              copy_32_3
  163 000000C4 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  164 000000C8 E8A0 1FF8       STMIA            R0!, {R3-R12}
  165 000000CC F1A2 0228       SUB              R2, R2, #(04*10*01)
  166 000000D0 E7F6            B                copy_32_2
  167 000000D2         
  168 000000D2         copy_32_3
  169 000000D2 2A04            CMP              R2, #(04*01*01) ; Copy remainin
                                                            g 32-bit words
  170 000000D4 D306            BCC              copy_16_1
  171 000000D6 F851 3B04       LDR              R3, [R1], #4
  172 000000DA F840 3B04       STR              R3, [R0], #4
  173 000000DE F1A2 0204       SUB              R2, R2, #(04*01*01)
  174 000000E2 E7F6            B                copy_32_3



ARM Macro Assembler    Page 5 


  175 000000E4         
  176 000000E4         copy_16_1
  177 000000E4 2A20            CMP              R2, #(02*01*16) ; Copy chunks o
                                                            f 16 16-bit words (
                                                            32 bytes per loop)
  178 000000E6 D342            BCC              copy_16_2
  179 000000E8 F831 3B02       LDRH             R3, [R1], #2
  180 000000EC F820 3B02       STRH             R3, [R0], #2
  181 000000F0 F831 3B02       LDRH             R3, [R1], #2
  182 000000F4 F820 3B02       STRH             R3, [R0], #2
  183 000000F8 F831 3B02       LDRH             R3, [R1], #2
  184 000000FC F820 3B02       STRH             R3, [R0], #2
  185 00000100 F831 3B02       LDRH             R3, [R1], #2
  186 00000104 F820 3B02       STRH             R3, [R0], #2
  187 00000108 F831 3B02       LDRH             R3, [R1], #2
  188 0000010C F820 3B02       STRH             R3, [R0], #2
  189 00000110 F831 3B02       LDRH             R3, [R1], #2
  190 00000114 F820 3B02       STRH             R3, [R0], #2
  191 00000118 F831 3B02       LDRH             R3, [R1], #2
  192 0000011C F820 3B02       STRH             R3, [R0], #2
  193 00000120 F831 3B02       LDRH             R3, [R1], #2
  194 00000124 F820 3B02       STRH             R3, [R0], #2
  195 00000128 F831 3B02       LDRH             R3, [R1], #2
  196 0000012C F820 3B02       STRH             R3, [R0], #2
  197 00000130 F831 3B02       LDRH             R3, [R1], #2
  198 00000134 F820 3B02       STRH             R3, [R0], #2
  199 00000138 F831 3B02       LDRH             R3, [R1], #2
  200 0000013C F820 3B02       STRH             R3, [R0], #2
  201 00000140 F831 3B02       LDRH             R3, [R1], #2
  202 00000144 F820 3B02       STRH             R3, [R0], #2
  203 00000148 F831 3B02       LDRH             R3, [R1], #2
  204 0000014C F820 3B02       STRH             R3, [R0], #2
  205 00000150 F831 3B02       LDRH             R3, [R1], #2
  206 00000154 F820 3B02       STRH             R3, [R0], #2
  207 00000158 F831 3B02       LDRH             R3, [R1], #2
  208 0000015C F820 3B02       STRH             R3, [R0], #2
  209 00000160 F831 3B02       LDRH             R3, [R1], #2
  210 00000164 F820 3B02       STRH             R3, [R0], #2
  211 00000168 F1A2 0220       SUB              R2, R2, #(02*01*16)
  212 0000016C E7BA            B                copy_16_1
  213 0000016E         
  214 0000016E         copy_16_2
  215 0000016E 2A02            CMP              R2, #(02*01*01) ; Copy remainin
                                                            g 16-bit words
  216 00000170 D306            BCC              copy_08_1
  217 00000172 F831 3B02       LDRH             R3, [R1], #2
  218 00000176 F820 3B02       STRH             R3, [R0], #2
  219 0000017A F1A2 0202       SUB              R2, R2, #(02*01*01)
  220 0000017E E7F6            B                copy_16_2
  221 00000180         
  222 00000180         copy_08_1
  223 00000180 2A10            CMP              R2, #(01*01*16) ; Copy chunks o
                                                            f 16 8-bit words (1
                                                            6 bytes per loop)
  224 00000182 D342            BCC              copy_08_2
  225 00000184 F811 3B01       LDRB             R3, [R1], #1
  226 00000188 F800 3B01       STRB             R3, [R0], #1
  227 0000018C F811 3B01       LDRB             R3, [R1], #1
  228 00000190 F800 3B01       STRB             R3, [R0], #1



ARM Macro Assembler    Page 6 


  229 00000194 F811 3B01       LDRB             R3, [R1], #1
  230 00000198 F800 3B01       STRB             R3, [R0], #1
  231 0000019C F811 3B01       LDRB             R3, [R1], #1
  232 000001A0 F800 3B01       STRB             R3, [R0], #1
  233 000001A4 F811 3B01       LDRB             R3, [R1], #1
  234 000001A8 F800 3B01       STRB             R3, [R0], #1
  235 000001AC F811 3B01       LDRB             R3, [R1], #1
  236 000001B0 F800 3B01       STRB             R3, [R0], #1
  237 000001B4 F811 3B01       LDRB             R3, [R1], #1
  238 000001B8 F800 3B01       STRB             R3, [R0], #1
  239 000001BC F811 3B01       LDRB             R3, [R1], #1
  240 000001C0 F800 3B01       STRB             R3, [R0], #1
  241 000001C4 F811 3B01       LDRB             R3, [R1], #1
  242 000001C8 F800 3B01       STRB             R3, [R0], #1
  243 000001CC F811 3B01       LDRB             R3, [R1], #1
  244 000001D0 F800 3B01       STRB             R3, [R0], #1
  245 000001D4 F811 3B01       LDRB             R3, [R1], #1
  246 000001D8 F800 3B01       STRB             R3, [R0], #1
  247 000001DC F811 3B01       LDRB             R3, [R1], #1
  248 000001E0 F800 3B01       STRB             R3, [R0], #1
  249 000001E4 F811 3B01       LDRB             R3, [R1], #1
  250 000001E8 F800 3B01       STRB             R3, [R0], #1
  251 000001EC F811 3B01       LDRB             R3, [R1], #1
  252 000001F0 F800 3B01       STRB             R3, [R0], #1
  253 000001F4 F811 3B01       LDRB             R3, [R1], #1
  254 000001F8 F800 3B01       STRB             R3, [R0], #1
  255 000001FC F811 3B01       LDRB             R3, [R1], #1
  256 00000200 F800 3B01       STRB             R3, [R0], #1
  257 00000204 F1A2 0210       SUB              R2, R2, #(01*01*16)
  258 00000208 E7BA            B                copy_08_1
  259 0000020A         
  260 0000020A         copy_08_2
  261 0000020A 2A01            CMP              R2, #(01*01*01) ; Copy remainin
                                                            g 8-bit words
  262 0000020C D306            BCC              rt_memcpy_end
  263 0000020E F811 3B01       LDRB             R3, [R1], #1
  264 00000212 F800 3B01       STRB             R3, [R0], #1
  265 00000216 F1A2 0201       SUB              R2, R2, #(01*01*01)
  266 0000021A E7F6            B                copy_08_2
  267 0000021C         
  268 0000021C         
  269 0000021C         rt_memcpy_end
  270 0000021C BC01            POP              {R0}        ; pop pdest
  271 0000021E E8BD 1FF8       LDMFD            SP!, {R3-R12} ; restore registe
                                                            rs from stack
  272 00000222 4770            BX               LR          ; return
  273 00000224         
  274 00000224         
  275 00000224                 END
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\build\keil\obj\rt_memcpy_rvds.d -o.\build\keil\obj\rt_memcpy_rvds.o 
-IC:\Users\33368\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.17.1\Drivers\CMSI
S\Device\ST\STM32F4xx\Include --predefine="__UVISION_VERSION SETA 539" --predef
ine="STM32F427xx SETA 1" --list=.\build\keil\list\rt_memcpy_rvds.lst packages\r
t_memcpy_cm-latest\rt_memcpy_rvds.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 33 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      None
Comment: .text unused
chk_align_16 00000048

Symbol: chk_align_16
   Definitions
      At line 118 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 98 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
Comment: chk_align_16 used once
chk_align_32 00000018

Symbol: chk_align_32
   Definitions
      At line 94 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      None
Comment: chk_align_32 unused
copy_08_1 00000180

Symbol: copy_08_1
   Definitions
      At line 222 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 123 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
      At line 216 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
      At line 258 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S

copy_08_2 0000020A

Symbol: copy_08_2
   Definitions
      At line 260 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 224 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
      At line 266 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S

copy_16_1 000000E4

Symbol: copy_16_1
   Definitions
      At line 176 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 127 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
      At line 170 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
      At line 212 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S

copy_16_2 0000016E

Symbol: copy_16_2
   Definitions
      At line 214 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 178 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
      At line 220 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S

copy_32_1 0000006C

Symbol: copy_32_1
   Definitions
      At line 136 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 105 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
      At line 158 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S

copy_32_2 000000C0

Symbol: copy_32_2
   Definitions
      At line 160 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 138 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
      At line 166 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S

copy_32_3 000000D2

Symbol: copy_32_3
   Definitions
      At line 168 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 162 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
      At line 174 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S

pre_copy_1 0000002C

Symbol: pre_copy_1
   Definitions
      At line 103 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 115 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
Comment: pre_copy_1 used once
pre_copy_1_cont 00000036

Symbol: pre_copy_1_cont
   Definitions
      At line 110 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 107 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
Comment: pre_copy_1_cont used once
pre_copy_2 00000056

Symbol: pre_copy_2
   Definitions
      At line 125 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 122 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
      At line 133 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S

rt_memcpy 00000000

Symbol: rt_memcpy
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 75 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 26 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
Comment: rt_memcpy used once
rt_memcpy_1 00000006

Symbol: rt_memcpy_1
   Definitions
      At line 80 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 77 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
Comment: rt_memcpy_1 used once
rt_memcpy_2 0000000C

Symbol: rt_memcpy_2
   Definitions
      At line 85 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 82 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
Comment: rt_memcpy_2 used once
rt_memcpy_3 00000012

Symbol: rt_memcpy_3
   Definitions
      At line 90 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 87 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
Comment: rt_memcpy_3 used once
rt_memcpy_end 0000021C

Symbol: rt_memcpy_end
   Definitions
      At line 269 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
   Uses
      At line 108 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S
      At line 262 in file packages\rt_memcpy_cm-latest\rt_memcpy_rvds.S

18 symbols
351 symbols in table
